{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"map5topo.nl","text":""},{"location":"#welcome-to-the-map5topo-website","title":"Welcome to the map5topo website!","text":"<p>map5topo is a topographic digital map covering The Netherlands plus parts of bordering countries. The map5topo project started in April 2022 and is ongoing since.</p> <p>Source data originates from Open Datasets like the Dutch \"Key Registries\" (\"Basisregistraties\": BAG, BRT, BGT, BRK, AHN, ...)  and from OpenStreetMap.</p> <p>map5topo is provided by map5.nl via OGC tiled web services like WMTS, but also \"XYZ\" (Google/OSM tiles, a.k.a. Web Mercator) tiles. Currently only raster (image) tiles, including \"HQ Retina\". Vector tiles are under development.</p> <p>This website now covers mainly work-in-progress documentation. Eventually map5topo will be an Open Source project. At the moment we are cleaning up code and more, as to have a more accessible project. Be patient!</p> <p>Please see the left-hand navigation for the table of contents.</p>"},{"location":"#demo","title":"Demo","text":"<p>View map5topo in full interactively.</p>"},{"location":"#mobile-app","title":"Mobile App","text":"<p>There is a free map5topo app for mobile phone (Android, iPhone).</p> <p></p> <p>Download and install from the App Store for iPhone or for Android from the PlayStore.</p>"},{"location":"#gallery","title":"Gallery","text":"<p>Watch work in progress screenshots in the Gallery.</p>"},{"location":"#newsletter","title":"Newsletter","text":"<p>Stay uptodate through the Newsletter. For map5topo developments, start with Newsletter nr 5. (In Dutch, sorry).</p>"},{"location":"#presentations","title":"Presentations","text":"<p>map5topo and its development has been presented on multiple events, latest first:</p> <ul> <li>\"Wie MapLibre und Vektorkarten die Welt \u00fcbernehmen\" - In German - FOSSGIS 2025, M\u00fanster, Germany - March 26, 2025 - abstract - VIDEO - [PDF Slides].</li> <li>\"Basisregistraties en OpenStreetMap mixen voor map5topo kaarten\" - FOSS4G-BE-NL - Baarle - Sept 26, 2024 - [PDF Slides].</li> <li>\"Melting Dutch open data and OpenStreetMap into a single schema\" - Maptime AMS - September 19, 2024 - [PDF Slides]</li> <li>\"map5topo - een nieuwe, frisse topokaart van Nederland\" - OSGeo.nl FOSS4GNL Middelburg - September 14, 2023 - [PDF Slides]</li> <li>\"Introducing map5topo - a new Topographic Map of The Netherlands\" - Information Sessions - Oktober 5+6, 2022 - Online - Dutch - [PDF Slides]</li> <li>\"map5topo - a New Topographic Map of The Netherlands\" - Geomob Barcelona - November 22, 2022 - [PDF Slides] .</li> </ul>"},{"location":"#video","title":"Video","text":"<p>Even more curious? Watch a video presentation of work-in-progress:</p> <p></p><p></p>"},{"location":"#support","title":"Support","text":"<p>For help and/or questions, send email to our Helpdesk. If you find errors or have suggestions, you can also report directly on GitHub.</p>"},{"location":"research/","title":"Research","text":""},{"location":"research/#research","title":"Research","text":"<p>Initial and ongoing research.  Initially to come to an optimal toolchain, data and map design. Later also reseaarch into performance measurements and optimizations.</p>"},{"location":"research/#tile-seeding-optimization","title":"Tile Seeding Optimization","text":"<p>Tile seeding especially for Retina (512x512) is a long process with sometimes processes \"dying\". Sometimes not all tiles are rendered, especially at some lower zoomlevels. Investigated in May 2024 : measuring tile generation performance in order to find bottlenecks.</p> <p>By isolating the generation of a single tile, the performance in each of its process-steps can be  measured. Tile generation is performed by Mapnik from the XML Style files. Mapnik reads the file (once) and then basically performs a series of PostGIS queries, one for each Layer, and then  draws the map and generates a tile image. </p> <p>So first we need to have a way to measure and analyse query times. We do this by both logging queries that take more than N millisecs, typically 1000 and using the Postgres statistics system to actually be able to \"query on query times\", get the top-N time-consuming queries.</p>"},{"location":"research/#logging-queries-standard","title":"Logging Queries - Standard","text":"<p>First we like to log queries taking over N millisecs.</p> <p>How to log Postgres query statements but not flood the logfile? Some hints can be found in this Medium article The essential lines in <code>postgresql.conf</code> are: </p><pre><code>logging_collector = on\nlog_directory = '/var/log/postgres'\nlog_filename = '%Y-%m-%d_%H%M%S.log'\nlog_statement = 'none'\nlog_min_messages = 'info'\nlog_min_error_statement = 'info'\nlog_duration = on\nlog_min_duration_statement = 2000 # longer two secs see below\nlog_line_prefix = '%m [%p]: [%l-1] user=%u,db=%d '  # Time, process ID, line number, username, and database name.\n</code></pre> <p>The essential line is <code>log_min_duration_statement = &lt;millis&gt;</code>. Instead of <code>log_statement = 'all'</code> to switch on/off we can use a psql statement:</p> <pre><code>ALTER DATABASE gis SET log_min_duration_statement = 1000;\n</code></pre> <p>Switching logging off is sometimes hard,  but we found in this article: </p><pre><code>ALTER USER gis RESET log_statement;\nALTER DATABASE gis RESET log_statement;\n</code></pre>"},{"location":"research/#using-the-pg-statistics-system","title":"Using the PG statistics system","text":"<p>Each tile/image generation by Mapnik will fire like 20+ queries on the PostgreSQL DB. Some tables are used for multiple Mapnik Layers, for example <code>landcover</code> both under and over hillshade raster. Also <code>transport</code> is rendered multiple time like first tunnels, the regular (z_index=0) and bridges.</p> <p>PostgreSQL has a powerful internal statistics collector. This can be activated via a shared library called <code>pg_stat_statements</code>.</p> <p>We found a very useful tutorial by Hans-J\u00fcrgen Sch\u00f6nig.</p> <p>The first thing you have to do is to change shared_preload_libraries in postgresql.conf:</p> <p><code>shared_preload_libraries = 'pg_stat_statements'</code></p> <p>Then restart PostgreSQL.</p> <p>Finally, the module can be enabled in your desired database: </p><pre><code>CREATE EXTENSION pg_stat_statements;\n</code></pre> <p>Listing all possible stats columns: <code>d pg_stat_statements</code> or via SQL :</p> <pre><code>SELECT \n  column_name, \n  data_type, \n  character_maximum_length, \n  is_nullable, \n  column_default \nFROM \n  information_schema.columns \nWHERE \n  table_name = 'pg_stat_statements';\n</code></pre> <p>The last step will deploy a view \u2013 we will need to inspect the data collected by the <code>pg_stat_statements</code> machinery.</p> <pre><code>SELECT calls,\n     round(total_exec_time::numeric, 2) AS total_time,\n     round(mean_exec_time::numeric, 2) AS mean_time,\n     round((100 * total_exec_time / sum(total_exec_time) \n                 OVER ())::numeric, 2) AS percentage,\n    query\nFROM  pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 100;\n</code></pre> <p>Now we can measure stats after generating a tile via MapProxy or image directly with Mapnik. After each test we can reset the stats with this statement: </p> <p><code>SELECT pg_stat_statements_reset();</code></p>"},{"location":"research/#the-tests","title":"The Tests","text":"<p>Test: zoom RD3 about 75% is taken by two queries on <code>map5.landcover</code> table.</p> <p>We take test tile nr: zoom=2 x=2 y=1</p> <p>To render using Mapnik direct:</p> <pre><code>cd git/tools\n./mapnik-render-tile.sh 2 2 1\n</code></pre> <p>So the total test is:</p> <pre><code>-- reset stats\nSELECT pg_stat_statements_reset();\n\n-- generate image\n./mapnik-render-tile.sh 2 2 1\n\n-- Get statistics, the top100 time consuming queries\nSELECT calls,\n     round(total_exec_time::numeric, 2) AS total_time,\n     round(mean_exec_time::numeric, 2) AS mean_time,\n     round((100 * total_exec_time / sum(total_exec_time) \n                 OVER ())::numeric, 2) AS percentage,\n    query\nFROM  pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 100;\n\n-- then analyse\n</code></pre> <p>Main output Mapnik tile rendering direct.</p> <pre><code>./mapnik-render-tile.sh 2 2 1\nmapnik_style=map5topo.xml\nloaded Mapnik object time=3.4499104022979736s\nrender sizes: render_size_tx=1 render_size_ty=1 tiles-at-zoom=4\nrender coords: p0x=155000.00000000006 p0y=242799.04000000004 p1x=375200.96000000014 p1y=463000.00000000006\nenv Box2d(155000.00000000006,242799.03999999998,375200.96000000014,463000.00000000006) \nzoom=2 \nscale_denominator=3072000.0000000014 \nscale=860.1600000000003 \ntime=12.883508920669556s\nALL DONE - output file present as mapnik/output/tile-2-2-1.jpeg\n</code></pre> <p>Image rendering takes about 14 seconds! Analysing, thinking it may be the number of records for this zoomlevel:</p> <pre><code>Current Setting: ST_SimplifyPreserveTopology(s.geom, 600) and area &gt; 50000\n\nselect count(*), sum(area) from map5.landcover where rdz_max &lt;= 3;\n\n\"count\" \"sum\" 49778 13092259408\n\nstats: `\"map5.landcover  2  6793.72 3396.86 74.79`\n\n2 queries taking about 7 seconds and occupying almost 75%!\n\nNew Setting: `ST_SimplifyPreserveTopology(s.geom, 6000) and area &gt; 100000`\n\n`select count(*), sum(area) from map5.landcover where rdz_max &lt;= 3;`\n\n\"count\" \"sum\" 24815 11365954503\n\nreset stats: `SELECT pg_stat_statements_reset();`\nget image\n\"query\" \"calls\" \"total_time\"    \"mean_time\" \"percentage\"\nmap5.landcover 2    6841.51 3420.75 75.11\n</code></pre> <p>Hardly any difference! Is the bottleneck maybe the total numer of records, almost 20 million, in landcover?</p> <p>Looking at over 1 second duration:</p> <p></p><pre><code>-- 2024-05-22 15:19:50.505 UTC [257]: [1-1] user=gis,db=gis LOG:  duration: 3589.070 ms  \nSELECT ST_AsBinary(\"geom\") AS geom,\"lod1\",\"lod2\" FROM (SELECT geom,lod1,lod2,lod3,rdz_min,rdz_max FROM map5.landcover\n                     WHERE (rdz(3.072e+06)) BETWEEN rdz_min AND rdz_max) AS landcover WHERE \"geom\" \n                     &amp;&amp; ST_SetSRID('BOX3D(155000.0000000001 275000,300000 463000.0000000001)'::box3d, 28992);\n\n--2024-05-22 15:19:53.342 UTC [257]: [2-1] user=gis,db=gis LOG:  duration: 2832.367 ms \nSELECT ST_AsBinary(\"geom\") AS geom,\"lod1\",\"lod2\" FROM (SELECT geom,lod1,lod2,lod3,rdz_min,rdz_max FROM map5.landcover\n                     WHERE (rdz(3.072e+06)) BETWEEN rdz_min AND rdz_max) AS landcover WHERE \"geom\" \n                     &amp;&amp; ST_SetSRID('BOX3D(155000.0000000001 275000,300000 463000.0000000001)'::box3d, 28992);\n\n-- 2024-05-22 15:19:55.163 UTC [257]: [3-1] user=gis,db=gis LOG:  duration: 1305.991 ms\nSELECT ST_AsBinary(\"geom\") AS geom,\"lod2\" FROM (SELECT geom,length,lod1,lod2,lod3,oneway,z_index,name,surface,grade,abroad,rdz_min,rdz_max FROM map5.transport\n                     WHERE lod1 IN ('road', 'trail')\n                    AND (rdz(3.072e+06) BETWEEN rdz_min AND rdz_max)\n                    AND (z_index = 0 OR (bridge IS FALSE AND tunnel IS FALSE))\n                    ORDER BY (CASE WHEN lod2 IN ('motorway','trunk') \n                        THEN 5 WHEN lod2 = 'primary' THEN 1 WHEN lod2 = 'secondary' THEN 2 WHEN lod2='tertiary' THEN 3 ELSE 4 END) DESC\n                    ) AS transport_roads WHERE \"geom\" \n                    &amp;&amp; ST_SetSRID('BOX3D(155000.0000000001 275000,300000 463000.0000000001)'::box3d, 28992);\n</code></pre> This takes about 17 secs, returning 33000 objects. <p>Where is the time spent? CPU or I/O ?</p> <p>Measuring I/O time is simple. The track_io_timing parameter can be adjusted to measure this vital KPI.  You can turn it on in postgresql.conf for the entire server, or simply adjust things on the database  level if you want more fine-grained data:</p> <pre><code>ALTER DATABASE gis SET track_io_timing = on;\n\nSELECT total_exec_time, \n            blk_read_time, \n            blk_write_time,\n            query\nFROM pg_stat_statements \nORDER BY blk_read_time + blk_write_time DESC \nLIMIT 10;\n</code></pre> <p>But in the end, as is often the case, this is usually a matter of setting indexes. Although there is a spatial index on <code>geom</code>, <code>EXPLAIN</code> shows that most of the query time is spent on the <code>BETWEEN rdz_min AND rdz_max</code> as for lowzoom-queries about 4 million rows need to be matched on the 'heap' returned from the spatial-bbox selection.</p> <p>Setting indexes like:</p> <pre><code>CREATE INDEX map5_landcover_rdz_min_idx ON map5.landcover USING btree (rdz_min);\nCREATE INDEX map5_landcover_rdz_max_idx ON map5.landcover USING btree (rdz_max);\n</code></pre> <p>reduces the query time until order of 100 millisecs! Albeit with a few 100 MB of index space. We set these for now on <code>landcover</code>, <code>structure</code> and <code>water</code>.</p> <p>Again we do the test, logging only queries over 1 second.  </p><pre><code>./mapnik-render-tile.sh 2 2 1\nmapnik_style=map5topo.xml\nloaded Mapnik object time=2.7876768112182617s\nrender sizes: render_size_tx=1 render_size_ty=1 tiles-at-zoom=4\nrender coords: p0x=155000.00000000006 p0y=242799.04000000004 p1x=375200.96000000014 p1y=463000.00000000006\nenv Box2d(155000.00000000006,242799.03999999998,375200.96000000014,463000.00000000006) \nzoom=2 scale_denominator=3072000.0000000014 \nscale=860.1600000000003 \ntime=4.631199836730957s\nALL DONE - output file present as mapnik/output/tile-2-2-1.jpeg\n</code></pre> About 5 seconds now! Only one query above 1 second: <pre><code>2024-05-23 12:30:03.312 UTC [4275]: [1-1] user=gis,db=gis LOG:  duration: 1390.031 ms\nSELECT ST_AsBinary(\"geom\") AS geom,\"lod2\" FROM \n(SELECT geom,length,lod1,lod2,lod3,oneway,z_index,name,surface,grade,abroad,rdz_min,rdz_max FROM map5.transport\n                     WHERE lod1 IN ('road', 'trail')\n                    AND (rdz(3.072e+06) BETWEEN rdz_min AND rdz_max)\n                    AND (z_index = 0 OR (bridge IS FALSE AND tunnel IS FALSE))\n                    ORDER BY (CASE WHEN lod2 IN ('motorway','trunk') THEN 5 WHEN lod2 = 'primary' THEN 1 WHEN lod2 = 'secondary' THEN 2 WHEN lod2='tertiary' THEN 3 ELSE 4 END) DESC\n                    ) AS transport_roads WHERE \"geom\" &amp;&amp; ST_SetSRID('BOX3D(155000.0000000001 275000,300000 463000.0000000001)'::box3d, 28992)\n</code></pre> <p>So we index <code>transport</code> as well, though here we may need indexing on <code>lod1</code> and <code>lod2</code> as well...and the rendering time is now 0.8sec! So index,index,index is the answer!</p> <p>Final run after not even indexes set on all map5-tables:</p> <pre><code>./mapnik-render-tile.sh 2 2 1\nmapnik_style=map5topo.xml\nloaded Mapnik object time=1.9455204010009766s\nrender sizes: render_size_tx=1 render_size_ty=1 tiles-at-zoom=4\nrender coords: p0x=155000.00000000006 p0y=242799.04000000004 p1x=375200.96000000014 p1y=463000.00000000006\nenv Box2d(155000.00000000006,242799.03999999998,375200.96000000014,463000.00000000006) \nzoom=2 \nscale_denominator=3072000.0000000014 \nscale=860.1600000000003 \ntime=0.821070671081543s\nALL DONE - output file present as mapnik/output/tile-2-2-1.jpeg\n</code></pre> <p>CONCLUSION: reduced rendering time from 14 seconds to 0.8 by simply indexing mainly min_rdz and max_rdz, the per-record zoomrange!</p>"},{"location":"research/#geopackage-tile-storing","title":"GeoPackage Tile Storing","text":"<p>Apart from the DB query and Mapnik rendering storing tiles in GeoPackage also contributes to total tile seeding performance. Too slow often like 1500-5000 tiles/minute (even after Mapnik and PostGIS optimized as above). There must be other bottlenecks</p>"},{"location":"research/#analysis","title":"Analysis","text":"<p>Apart from disabling cache lock (remove <code>--use-cache-lock</code>) in MP seeder script, some simple sqlite <code>PRAGMA</code> settings increased speed enormously: We found a huge optimization in store time by using these two PRAGMA's:</p> <pre><code>self._db_conn_cache.db.execute('PRAGMA synchronous=OFF')\nself._db_conn_cache.db.execute('PRAGMA journal_mode=MEMORY')\n</code></pre> <p>and with PRAGMA's up to 45000-60000 tiles/min! So about a 10-fold performance improvement. Question: how safe are these <code>PRAGMA</code>s?</p>"},{"location":"research/#tile-serving-performance","title":"Tile Serving Performance","text":"<p>Question is: tiles are served from huge caches, but there appear to be no indexes...</p> <p>Tests using Apache Benchmark (ab). <code>ab -n 1000 -c 50 https://s.test.map5.nl/map/map5.demo11/tms/1.0.0/map5topo/EPSG28992/6/27/30.jpeg</code></p>"},{"location":"research/#without-indexes","title":"Without Indexes","text":"<pre><code>Concurrency Level:      50\nTime taken for tests:   5.151 seconds\nComplete requests:      1000\nFailed requests:        0\nTotal transferred:      35098000 bytes\nHTML transferred:       34745000 bytes\nRequests per second:    194.14 [#/sec] (mean)\nTime per request:       257.542 [ms] (mean)\nTime per request:       5.151 [ms] (mean, across all concurrent requests)\nTransfer rate:          6654.33 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:       83   99   9.5     96     140\nProcessing:    80  147  35.1    144     284\nWaiting:       54  122  35.0    118     258\nTotal:        169  246  38.0    242     406\n\nPercentage of the requests served within a certain time (ms)\n  50%    242\n  66%    257\n  75%    266\n  80%    272\n  90%    292\n  95%    312\n  98%    368\n  99%    382\n 100%    406 (longest request)\n</code></pre> <p>After indexing:</p> <pre><code>Concurrency Level:      50\nTime taken for tests:   5.163 seconds\nComplete requests:      1000\nFailed requests:        0\nTotal transferred:      35098000 bytes\nHTML transferred:       34745000 bytes\nRequests per second:    193.69 [#/sec] (mean)\nTime per request:       258.148 [ms] (mean)\nTime per request:       5.163 [ms] (mean, across all concurrent requests)\nTransfer rate:          6638.71 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:       87   99   9.3     96     141\nProcessing:    82  147  36.0    141     319\nWaiting:       56  122  36.0    116     293\nTotal:        170  246  38.4    240     422\n\nPercentage of the requests served within a certain time (ms)\n  50%    240\n  66%    256\n  75%    267\n  80%    277\n  90%    297\n  95%    315\n  98%    346\n  99%    364\n 100%    422 (longest request)\n</code></pre> <p>Hmm, hardly difference, also tested with <code>-k</code> (keep-alive) and different concurrency levels. </p>"},{"location":"research/#vector-tiles","title":"Vector Tiles","text":"<p>One of the main questions is: in these modern times, the best starting point would be Vector Tiles, but...</p> <ul> <li>See https://github.com/mapbox/awesome-vector-tiles, interesting: https://github.com/mkeller3/FastVector, https://github.com/developmentseed/timvt</li> </ul>"},{"location":"research/#service-toolchain","title":"Service Toolchain","text":"<ul> <li><code>PostGIS</code> --&gt; <code>pg_tileserv</code> --&gt; <code>tileserver-gl</code> --&gt; <code>MapProxy</code>:</li> </ul> <p>Specifics:</p> <ul> <li>PostGIS - table data and functions</li> <li><code>pg_tileserv</code> - use tables and functions to serve MVT tiles</li> <li>NO MVT MBTiles file-caches (for now)</li> <li><code>maptiler/tileserver-gl</code> fetches from <code>pg_tileserv</code></li> <li><code>maptiler/tileserver-gl</code> renders and serves raster tiles via WMTS</li> <li><code>MapProxy</code> uses raster WMTS as Source(s)</li> <li><code>MapProxy</code> may use transparent AHN hillshade overlay as Source(s) to overlay</li> <li><code>MapProxy</code> creates mbtile-caches for raster tiles (as already in map5.nl)</li> <li>alternatives to <code>pg_tileserv</code> are FASTVector [5] and TiMVT [6].</li> </ul> <p>Questions:</p> <ul> <li>is there an (Open) alternative for <code>tileserver-gl</code> ? e.g. a tool that directly renders raster tiles from MVT.</li> <li>can we do something with maplibre (-native)?</li> </ul>"},{"location":"research/#data-preparation","title":"Data Preparation","text":"<p>See Tom van Tilburg article [1]. At least needed:</p> <ul> <li>feature reclassification for lower zooms</li> <li>geometry simplification</li> <li>split up (large) polygons</li> </ul> <p>Big question: follow existing OSM/Imposm data schemas or similar to Tom [1] and/or PDOK [2]? Or can this be solved by using BRT scales like Top1000, Top500 etc?</p> <p>Many datasets available via geotoko.nl.</p>"},{"location":"research/#map-design","title":"Map Design","text":"<ul> <li>classical topomap look, </li> <li>a simple and detailed version like OpenTopo/OpenSimpleTopo</li> <li>coloured and greyscale</li> <li>separate hillshading map, bare and with labels+roads</li> <li>may use OpenTopoMap [3] as starter?  Classic toolchain: osm2pgsql, SQL and Mapnik</li> <li>or https://github.com/nst-guide/osm-liberty-topo  [4]?</li> </ul> <p>Tooling:</p> <ul> <li>using Maputnik? GeoStyler?</li> <li>seems that Mapbox GL/MapLibre GL is CartoCSS follow-up, and can all generate Mapnik styles (?)</li> </ul>"},{"location":"research/#cartocss-kosmtik-poc-14072022","title":"CartoCSS + Kosmtik PoC - 14.07.2022","text":"<p>See <code>git/research/carto</code>.</p> <p>CartoCSS,  originally from MapBox, is a higer level styling  language based on CSS (Less).  The <code>carto</code> command can generate a <code>Mapnik</code> XML file. This is  still used in the main OSM Map, with a style also called \"Carto\".</p> <p>Kosmtik is mainly a server through which you can quickly see edits in CartoCSS. It is not a CartoCSS editor (as I thought). But still very useful to see edits, done in e.g. vi.</p>"},{"location":"research/#the-example","title":"The Example","text":"<p>Very simple example with just water Dutch generalized Shapefile for demo. </p> <ul> <li>project in work/example1/project.yml.mml.</li> <li>style in work/example1/style.mss.</li> </ul>"},{"location":"research/#carto","title":"Carto","text":"<p>Using a Dockerfile:</p> <pre><code>./build.sh\n\nRun the carto command to convert a CartoCSS project to Mapnik XML.\nUsage: ./carto.sh \"command line\"\nExamples:\n./carto.sh \"carto --version\"\n\nFiles must have a .mss or .mml extension!\n./carto.sh \"carto example1/style.mss\"\n./carto.sh \"carto example1/project.yml.mml\"\n./carto.sh \"carto example1/project.yml.mml &gt; example1/project.xml\"\n</code></pre>"},{"location":"research/#kosmtik","title":"Kosmtik","text":"<p>Using an existing Docker Image and Bash script <code>kosmtik.sh</code>.  by https://github.com/Joxit/docker-kosmtik.</p> <ul> <li>script: https://github.com/Joxit/docker-kosmtik/blob/master/tools/kosmtik</li> <li>Docker Image: joxit/kosmtik from DockerHub</li> </ul> <p>Thus:</p> <pre><code>./kosmtik.sh serve work/example1/project.yml.mml\n\nbrowse http://0.0.0.0:6789\nChange polygon color in style.mss, see almost instant changes\n</code></pre>"},{"location":"research/#cartocss-topo-style-15072022","title":"CartoCSS + Topo Style - 15.07.2022","text":"<p>If going the 'CartoCSS' way there is an enormous amount of styles to choose, as starting point. For example the official OSM slippy map uses a style called 'Carto', which is maintained by Andy Allan (Gravitystorm and Thunderforest) and community:</p> <ul> <li>https://github.com/gravitystorm/openstreetmap-carto</li> </ul> <p>Now CartoCSS has many degrees of freedom how one structures the project file and style files.</p> <p>MapBox developed a CartoCSS style called \"OSM Bright\" which may be used as a starter for specific styles:</p> <ul> <li>https://github.com/mapbox/osm-bright</li> </ul> <p>The nice thing about \"OSM Bright\" is that it provides a very structured  file and style editing convention starting with  the 'project mml  which includes just four style (<code>.mss</code>) files:</p> <ul> <li>palette.mss - literally define you palette as symbolic vars: colors fonts etc.</li> <li>base.mss basic styles for landuse, water, admin boundaries </li> <li>roads.mss - how to style alle roads</li> <li>labels.mss - all labels</li> </ul> <p>These styles can be edited with TileMill.  TileMill is more advanced than Kosmik (see above) in that it can provide editing on-the-fly. But still an export to Mapnik is eventually possible.</p> <p>One example of a topographic \"OSM Bright\" based style is:</p> <ul> <li>https://github.com/duvifn/jnet_style</li> </ul> <p>Not actively maintained, but may be good starting point.</p> <p>Tilemill: recent, via Docker file: https://github.com/schachmett/docker-tilemill See: https://simon-fischer.info/2020/12/09/run-tilemill-in-a-docker-container/</p>"},{"location":"research/#png-vs-jpeg-tiles-17072022","title":"PNG vs JPEG tiles - 17.07.2022","text":"<p>JPEG is a better choice, especially for tiles with lots of detail like hillshading. This finding also came out of map5 development for the OpenTopo map, see Justs Blog on JPEG is Dead, long live JPEG.</p> <p>A small experiment with the map5topo map gave similar results:</p> <ul> <li>same image quality</li> <li>PNG 8 bit: too low quality for rich coloured map</li> <li>JPEG image about 4 times as small as PNG (24 bit)</li> <li>and: image generation, overall turnaround time in browser: JPEG twice as fast!</li> </ul> <p>So the choice is clear: use JPEG but with higher quality in encoding. This is like with OpenTopo, arranged in MapProxy config:</p> <pre><code># image/transformation options\nimage:\n# resampling_method: nearest\nresampling_method: bilinear\npaletted: true\nformats:\n  # UNUSED\n  png8:\n    format: image/png\n    colors: 256\n\n  png24:\n    format: image/png; mode=24bit\n    colors: 0\n\n  image/jpeg:\n    encoding_options:\n      jpeg_quality: 90\n</code></pre> <p>Below some results from tiles in JPEG and PGN24.</p> <p>Zoom 11:</p>"},{"location":"research/#png","title":"PNG","text":""},{"location":"research/#jpeg","title":"JPEG","text":"<p>Zoom 13:</p>"},{"location":"research/#png_1","title":"PNG","text":""},{"location":"research/#jpeg_1","title":"JPEG","text":""},{"location":"research/#see-changes-in-mapnik-style-files-directly","title":"See changes in Mapnik style files directly","text":"<p>Requirement: need a mechanism to directly see the results in map images  when changes made in Mapnik style files. Similar to Kosmtik and TileMill. We can then easily make an HTML page showing images or with a map-viewer that has permalinks in the address-bar. Or even a primitive edit app!</p> <p>Our \"engine\" is MapProxy: it generates map images via WMS, TMS or WMTS from the Mapnik styles. This is the first choice.  Investigate what can be done, otherwise need dedicated software like a WMS server directly on Mapnik styles. There is  a Mapnik OGC Server, but would take quite some effort to get working is expected. Or we need to develop ourselves.</p> <p>But we need to tackle some problems using MapProxy:</p> <ul> <li>caching: so changes are not visible unless removing cache</li> <li>MapFile object reuse: the (enhanced) Mapnik soure backend for MapProxy caches Mapfile objects</li> </ul> <p>The first problem can be solved by making a dedicated \"direct\" layer in MP config like:</p> <pre><code>layers:\n    - name: map5topo\n    title: Map5 Topomap - powered by map5.nl\n    sources: [ map5topo_cache ]\n\n    - name: map5topo_direct\n    title: Map5 Topomap - direct - no cache\n    sources: [ map5topo_no_cache ]\n.\n.\ncaches:\n\n    map5topo_no_cache:\n        grids: [ dutch_grid_lev13, webmerc_grid_lev19 ]\n        sources: [ map5topo_source ]\n        disable_storage: true\n        format: image/jpeg\n        meta_buffer: 64\n        meta_size: [ 4,4 ]\n        upscale_tiles: 4\n</code></pre> <p>Now tiles are always newly generated. </p> <p>Second problem is caching of Mapnik objects (the parsed XML) in the Mapproxy mapnik.py. We use a file from a MP PR that caches Mapnik objects. Solution: have that Python code use watchdog from pypi.</p>"},{"location":"research/#refactor-scale-delineation","title":"Refactor Scale Delineation","text":"<p>This determines the Rules that are 'hit' per scale range. The initial list assumes Web Mercator scales (at equator 0.28 mm per pixel). This does not match RD scales (resolutions) defined in the Geonovum tiling scheme. In some cases multiple resolutions will fall in a single scale range. This may have lead to multiple Rules being fired, maybe that was the reason for the performance penalty (?).</p> <p>Like done in Map5 for OpenTopo, TopRaster and more, define scale ranges where each range  captures a single zoom/resolution for both WebMerc and RD tiling. ALso reflect this in Entity naming.</p> <p>Original from OpenTopoMap and OSM in general:</p> <pre><code>&lt;!ENTITY maxscale_zoom0 \"&lt;MaxScaleDenominator&gt;250000000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom1 \"&lt;MaxScaleDenominator&gt;500000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom1 \"&lt;MinScaleDenominator&gt;200000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom2 \"&lt;MaxScaleDenominator&gt;200000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom2 \"&lt;MinScaleDenominator&gt;100000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom3 \"&lt;MaxScaleDenominator&gt;100000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom3 \"&lt;MinScaleDenominator&gt;50000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom4 \"&lt;MaxScaleDenominator&gt;50000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom4 \"&lt;MinScaleDenominator&gt;25000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom5 \"&lt;MaxScaleDenominator&gt;25000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom5 \"&lt;MinScaleDenominator&gt;12500000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom6 \"&lt;MaxScaleDenominator&gt;12500000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom6 \"&lt;MinScaleDenominator&gt;6500000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom7 \"&lt;MaxScaleDenominator&gt;6500000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom7 \"&lt;MinScaleDenominator&gt;3000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom8 \"&lt;MaxScaleDenominator&gt;3000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom8 \"&lt;MinScaleDenominator&gt;1500000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom9 \"&lt;MaxScaleDenominator&gt;1500000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom9 \"&lt;MinScaleDenominator&gt;750000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom10 \"&lt;MaxScaleDenominator&gt;750000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom10 \"&lt;MinScaleDenominator&gt;400000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom11 \"&lt;MaxScaleDenominator&gt;400000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom11 \"&lt;MinScaleDenominator&gt;200000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom12 \"&lt;MaxScaleDenominator&gt;200000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom12 \"&lt;MinScaleDenominator&gt;100000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom13 \"&lt;MaxScaleDenominator&gt;100000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom13 \"&lt;MinScaleDenominator&gt;50000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom14 \"&lt;MaxScaleDenominator&gt;50000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom14 \"&lt;MinScaleDenominator&gt;25000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom15 \"&lt;MaxScaleDenominator&gt;25000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom15 \"&lt;MinScaleDenominator&gt;12500&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom16 \"&lt;MaxScaleDenominator&gt;12500&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom16 \"&lt;MinScaleDenominator&gt;5000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom17 \"&lt;MaxScaleDenominator&gt;5000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom17 \"&lt;MinScaleDenominator&gt;2500&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom18 \"&lt;MaxScaleDenominator&gt;2500&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom18 \"\"&gt;\n</code></pre> <p>This was changed to:</p> <pre><code>&lt;!ENTITY maxscale_zoom0 \"&lt;MaxScaleDenominator&gt;250000000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom1 \"&lt;MaxScaleDenominator&gt;500000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom1 \"&lt;MinScaleDenominator&gt;200000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom2 \"&lt;MaxScaleDenominator&gt;200000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom2 \"&lt;MinScaleDenominator&gt;100000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom3 \"&lt;MaxScaleDenominator&gt;100000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom3 \"&lt;MinScaleDenominator&gt;50000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom4 \"&lt;MaxScaleDenominator&gt;50000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom4 \"&lt;MinScaleDenominator&gt;25000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom5_rd0 \"&lt;MaxScaleDenominator&gt;25000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom5_rd0 \"&lt;MinScaleDenominator&gt;12000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom6_rd1 \"&lt;MaxScaleDenominator&gt;12000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom6_rd1 \"&lt;MinScaleDenominator&gt;6000000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom7_rd2 \"&lt;MaxScaleDenominator&gt;6000000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom7_rd2 \"&lt;MinScaleDenominator&gt;2400000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom8_rd3 \"&lt;MaxScaleDenominator&gt;2400000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom8_rd3 \"&lt;MinScaleDenominator&gt;1200000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom9_rd4 \"&lt;MaxScaleDenominator&gt;1200000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom9_rd4 \"&lt;MinScaleDenominator&gt;600000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom10_rd5 \"&lt;MaxScaleDenominator&gt;600000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom10_rd5 \"&lt;MinScaleDenominator&gt;300000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom11_rd6 \"&lt;MaxScaleDenominator&gt;300000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom11_rd6 \"&lt;MinScaleDenominator&gt;150000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom12_rd7 \"&lt;MaxScaleDenominator&gt;150000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom12_rd7 \"&lt;MinScaleDenominator&gt;80000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom13_rd8 \"&lt;MaxScaleDenominator&gt;80000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom13_rd8 \"&lt;MinScaleDenominator&gt;40000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom14_rd9 \"&lt;MaxScaleDenominator&gt;40000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom14_rd9 \"&lt;MinScaleDenominator&gt;20000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom15_rd10 \"&lt;MaxScaleDenominator&gt;20000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom15_rd10 \"&lt;MinScaleDenominator&gt;10000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom16_rd11 \"&lt;MaxScaleDenominator&gt;10000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom16_rd11 \"&lt;MinScaleDenominator&gt;5000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom17_rd12 \"&lt;MaxScaleDenominator&gt;5000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom17_rd12 \"&lt;MinScaleDenominator&gt;2500&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom18_rd13 \"&lt;MaxScaleDenominator&gt;2500&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom18_rd13 \"&lt;MinScaleDenominator&gt;1250&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom19 \"&lt;MaxScaleDenominator&gt;1250&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom19 \"\"&gt;\n</code></pre> <p>Needs testing if this really captures wht is intended. E.g. the Entity  range  <code>minscale_zoom10_rd5-maxscale_zoom10_rd5</code> schould be the range for WebMerc Zoom 10 and RD 5.</p>"},{"location":"research/#refs","title":"Refs","text":"<ul> <li>[1] https://observablehq.com/@geodan/how-to-make-a-vectortile-basemap</li> <li>[2] https://www.pdok.nl/-/vector-tiles-brt-en-bgt-via-pdok</li> <li>[3] https://github.com/der-stefan/OpenTopoMap</li> <li>[4] https://github.com/nst-guide/osm-liberty-topo</li> <li>[5] https://github.com/mkeller3/FastVector</li> <li>[6] https://github.com/developmentseed/timvt </li> </ul>"},{"location":"app/privacy/","title":"Privacybeleid map5topo app","text":"<p>Just Objects BV, gevestigd aan:</p> <p>van der Hoochlaan 3 1181 PL Amstelveen Nederland</p> <p>is verantwoordelijk voor de verwerking van persoonsgegevens zoals weergegeven in deze privacyverklaring.</p> <p>Contactgegevens:</p> <p>https://justobjects.nl/ van der Hoochlaan 3 1181 PL Amstelveen Nederland</p> <p>Persoonsgegevens die wij verwerken</p> <p>Just Objects BV verwerkt je persoonsgegevens doordat je gebruik maakt van onze diensten en/of omdat je deze gegevens zelf aan ons verstrekt.</p> <p>Hieronder vind je een overzicht van de persoonsgegevens die wij verwerken:</p> <ul> <li>IP-adres</li> <li>Locatiegegevens (als je de kaart van je huidige locatie opvraagt)</li> </ul> <p>Bijzondere en/of gevoelige persoonsgegevens die wij verwerken</p> <p>Onze website en/of dienst heeft niet de intentie gegevens te verzamelen over websitebezoekers die jonger zijn dan 16 jaar. Tenzij ze toestemming hebben van ouders of voogd. We kunnen echter niet controleren of een bezoeker ouder dan 16 is. Wij raden ouders dan ook aan betrokken te zijn bij de online activiteiten van hun kinderen, om zo te voorkomen dat er gegevens over kinderen verzameld worden zonder ouderlijke toestemming. Als je er van overtuigd bent dat wij zonder die toestemming persoonlijke gegevens hebben verzameld over een minderjarige, neem dan contact met ons op via support@map5.nl, dan verwijderen wij deze informatie.</p> <p>Just Objects BV verwerkt jouw persoonsgegevens voor de volgende doelen:</p> <ul> <li>Om op basis van je actuele of gekozen locatie, kaarten van betreffend gebied bij je af te leveren.</li> <li>Het bewaken en verbeteren van de technische werking en beschikbaarheid van de kaartapplicatie.</li> <li>Misbruikdetectie</li> </ul> <p>Hoe lang we persoonsgegevens bewaren</p> <p>Just Objects BV bewaart je persoonsgegevens niet langer dan strikt nodig is om de doelen te realiseren waarvoor je gegevens worden verzameld. Wij hanteren de volgende bewaartermijnen voor de volgende (categorie\u00ebn) van persoonsgegevens:</p> <ul> <li>IP-adres: maximaal een jaar</li> </ul> <p>Delen van persoonsgegevens met derden</p> <p>Just Objects BV verstrekt uitsluitend aan derden en alleen als dit nodig is voor de uitvoering van onze overeenkomst met jou of om te voldoen aan een wettelijke verplichting.</p> <p>Cookies, of vergelijkbare technieken, die wij gebruiken</p> <p>Just Objects BV gebruikt alleen technische en functionele cookies. En analytische cookies die geen inbreuk maken op je privacy. Een cookie is een klein tekstbestand dat bij het eerste bezoek aan deze website wordt opgeslagen op jouw computer, tablet of smartphone. De cookies die wij gebruiken zijn noodzakelijk voor de technische werking van de website en jouw gebruiksgemak. Ze zorgen ervoor dat de website naar behoren werkt en onthouden bijvoorbeeld jouw voorkeursinstellingen. Ook kunnen wij hiermee onze website optimaliseren. Je kunt je afmelden voor cookies door je internetbrowser zo in te stellen dat deze geen cookies meer opslaat. Daarnaast kun je ook alle informatie die eerder is opgeslagen via de instellingen van je browser verwijderen.</p> <p>Gegevens inzien, aanpassen of verwijderen</p> <p>Je hebt het recht om je persoonsgegevens in te zien, te corrigeren of te verwijderen. Daarnaast heb je het recht om je eventuele toestemming voor de gegevensverwerking in te trekken of bezwaar te maken tegen de verwerking van jouw persoonsgegevens door Just Objects BV en heb je het recht op gegevensoverdraagbaarheid. Dat betekent dat je bij ons een verzoek kan indienen om de persoonsgegevens die wij van jou beschikken in een computerbestand naar jou of een ander, door jou genoemde organisatie, te sturen. </p> <p>Je kunt een verzoek tot inzage, correctie, verwijdering, gegevensoverdraging van je persoonsgegevens of verzoek tot intrekking van je toestemming of bezwaar op de verwerking van jouw persoonsgegevens sturen naar support@map5.nl.</p> <p>Om er zeker van te zijn dat het verzoek tot inzage door jou is gedaan, vragen wij jou een kopie van je identiteitsbewijs met het verzoek mee te sturen. Maak in deze kopie je pasfoto, MRZ (machine readable zone, de strook met nummers onderaan het paspoort), paspoortnummer en Burgerservicenummer (BSN) zwart. Dit ter bescherming van je privacy. We reageren zo snel mogelijk, maar binnen vier weken, op jouw verzoek.</p> <p>Just Objects BV wil je er tevens op wijzen dat je de mogelijkheid hebt om een klacht in te dienen bij de nationale toezichthouder, de Autoriteit Persoonsgegevens. Dat kan via de volgende link: https://autoriteitpersoonsgegevens.nl/nl/contact-met-de-autoriteit-persoonsgegevens/tip-ons</p> <p>Hoe wij persoonsgegevens beveiligen</p> <p>Just Objects BV neemt de bescherming van jouw gegevens serieus en neemt passende maatregelen om misbruik, verlies, onbevoegde toegang, ongewenste openbaarmaking en ongeoorloofde wijziging tegen te gaan. Als jij het idee hebt dat jouw gegevens toch niet goed beveiligd zijn of er aanwijzingen zijn van misbruik, neem dan contact op met onze helpdesk via support@map5.nl</p>"},{"location":"create/data/","title":"Data Preparation","text":""},{"location":"create/data/#data","title":"Data","text":"<p>Describes how to prepare data using the GitHub repo. This is also called \"ETL\".</p>"},{"location":"create/data/#1-startup-once","title":"1. Startup (once)","text":"<ul> <li><code>git clone https://github.com/map5nl/map5topo.git</code></li> <li>edit <code>git/env.sh</code> for your local hostname such that the main dirs are set by adding your host to <code>case</code> switch</li> <li>get credentials storage server, have your SSH public key (usually <code>id_rsa.pub</code>)  added for rsync without password</li> </ul> <p>Two global env vars are important, but have defaults:</p> <ul> <li><code>DEPLOY_SERVER</code>: set via hostname, usually <code>\"local\"</code>, only for production server it is <code>\"prod\"</code>. Has to do with SSL and domain settings mostly.</li> <li><code>MAP_AREA</code>  defaults: <code>muiden</code> on local systems and <code>nl</code>  when <code>DEPLOY_SERVER=prod</code>.</li> </ul> <p>Possible values for MAP_AREA: <code>muiden, utrecht, nl</code>. To override <code>MAP_AREA</code>, e.g. to create full NL on local system  e.g.: <code>export MAP_AREA=nl</code> or <code>export MAP_AREA=utrecht</code> in bash shell before calling any tools.</p>"},{"location":"create/data/#2-overall","title":"2. Overall","text":"<p>Data steps:</p> <ul> <li>DEM: pre-processing AHN DTM and hillshading and contour lines</li> <li>BGT download/import</li> <li>BRT download/import</li> <li>BRK (Parcels) download/import</li> <li>NWB (Hectoborden and Kilometerpoints) download/import</li> <li>OSM Data ETL: download PBF and convert to PostGIS</li> <li>DEM: generate contour-lines and put in PostGIS as lines</li> <li>Grid: download, import SQL of 1km RD-gridlines, \"kilometerhokken\" </li> <li>tiles: seed</li> <li>test: generate Mapnik tiles and web services</li> </ul> <p>All steps from git root dir. Many datasets have already been prepared in particular DEM (AHN Hillshade and Contours) so these only need to be downloaded.</p> <p><code>map5</code> is a special dataset: this is a DB schema generated locally from the above dataset. It creates tables that mix records from loaded datasets. So it always needs to run as last.</p>"},{"location":"create/data/#2-data-etl","title":"2. Data ETL","text":"<p>These are the minimum steps. Most datasets have smaller areas available: 'muiden' and (province) 'utrecht'</p> <p>You may want to set MAP_AREA to test 'muiden' first: <code>export MAP_AREA=muiden</code> in the same terminal session as running the commands. </p> <p><code>MAP_AREA</code> possible values <code>muiden</code>, <code>utrecht</code>, <code>nl</code> (whole country)</p> <p>The database needs to run, as a minimum do: <code>cd services/postgis; ./start.sh</code>. This also starts pgadmin4, a web-based DB manager. To access you need to start 'Traefik' service as well: <code>cd services/traefik; ./start.sh</code></p> <p>Or run entire service stack, including MapProxy and apps: <code>cd services; ./start.sh</code></p> <p>Now download and load all data.</p> <p></p><pre><code>cd tools\n\n# all steps in one:  \n# downloads all data and runs etl for DB, all for MAP_AREA\n./etl-all.sh\n</code></pre> On 'local' installations, all downloaded data is under <code>git/data</code>. This should be guarded to not push these to GitHub! <p>You can also run individual steps for download and load:</p> <pre><code># Download multiple datasets\n./download.sh bgt brk brt osm dem nwb grid\n\n# or single dataset\n./download.sh brk\n\n# Load downloaded data into DB (BRT not yet)\n./etl-load.sh bgt\n./etl-load.sh brk\n./etl-load.sh brt\n./etl-load.sh nwb\n./etl-load.sh osm\n./etl-load.sh dem-contours\n./etl-load.sh grid\n./etl-load.sh map5 \n\n# or only OSM\n./etl-osm-all.sh\n</code></pre> <p>If all goes well, you can test if you can generate tiles with Mapnik (more below):</p> <p><code>./mapnik-render-cat.sh roads</code></p> <p>To force full NL preparation locally, set <code>export MAP_AREA=\"nl\"</code>.</p>"},{"location":"create/data/#3-dem","title":"3. DEM","text":"<p>NB: this step is only required if you ever need to prepare DEM. Normally you download the already prepared files for Hillshade and Contours via <code>tools/download.sh dem</code> (see above).</p> <p>To prepare entire NL you will need storage for about 600GB. If you only download the already prepared (dem/output) files, about 100GB is needed. All DEM processing is initiated from the <code>tools/dem</code> dir.</p> <p>The processing is MAP_AREA-aware, so you can test for small areas.</p>"},{"location":"create/data/#download-ready-files","title":"Download Ready files","text":"<p>Use this to download entire NL (hillshade and contours in 5m and 05m). No local preparation needed:</p> <pre><code>cd tools/dem\n./dem-download.sh output\n</code></pre>"},{"location":"create/data/#preparing-download-shrink-and-fill-holes","title":"Preparing: Download, shrink and fill holes","text":"<p>Use this to prepare small area mainly.  Using <code>tools/dem-prepare.sh &lt;muiden|utrecht|nl&gt; 5m [05m]</code>. </p> <p>Full NL, all resolutions:</p> <pre><code>cd tools\n./dem-prepare.sh nl 5m 05m\n</code></pre> <p>Takes about 40h. About 1370 DTM tiff files per resolution. But cleaned and lossless compressed TIFF input files are produced.  Only needed once. Hillshade and Contour generation are separate steps using the result of this step.</p> <p>Some warnings, possibly rounding issues (?).</p> <pre><code>Warning 1: The definition of geographic CRS EPSG:4289 got from \nGeoTIFF keys is not the same as the one from the EPSG registry, \nwhich may cause issues during reprojection operations. Set GTIFF_SRS_SOURCE \nconfiguration option to EPSG to use official parameters (overriding the ones from GeoTIFF keys), \nor to GEOKEYS to use custom values from GeoTIFF keys and drop the EPSG code.\n</code></pre> <p>For local, small area (muiden or utrecht)</p> <pre><code>cd tools/dem\n./dem-prepare.sh muiden 5m 05m\n</code></pre>"},{"location":"create/data/#generate-hillshade","title":"Generate Hillshade","text":"<pre><code>cd tools/dem\n./dem-hillshade.sh 5m 05m\n</code></pre> <p>Generates one GeoTIFF with b&amp;w hillshade per resolution. Start za 11 juni, 2022, 19:45. Ready  june 12, 04:08. About 8.5 hrs. </p> <p>Tip: You may run any command using the GDAL Docker Image. You need to be in the <code>docker</code> subdir.</p> <pre><code>cd tools/dem/docker\n`./run-docker.sh \"gdalinfo /data/output/5m/hillshade-5m.tif\"`\n</code></pre>"},{"location":"create/data/#generate-contour-lines","title":"Generate Contour Lines","text":"<pre><code>cd tools\n./dem-contours.sh\n</code></pre>"},{"location":"create/data/#4-sea-and-water-shapes-sea-only","title":"4. Sea and Water Shapes (Sea Only)","text":"<p>(NOT REQUIRED FOR LOCAL SYSTEM since data will be downloaded during OSM ETL)</p> <p>Need the generalized water polygons from osmdata.openstreetmap.de as SQL Dump files. See <code>tools/etl/osm-prepare-sea.sh</code>.  Basically this sequence to prepare. Need GDAL <code>ogr2ogr</code>.</p> <pre><code>/bin/rm -rf *-water-polygons-split-3857* *.sql.gz &gt; /dev/null 2&gt;&amp;1\n\nexport OGR_OPTS=\"--config PG_USE_COPY YES -lco GEOMETRY_NAME=geom -overwrite -a_srs EPSG:28992 -s_srs EPSG:3857 -t_srs EPSG:28992 -spat 296778 6514442 853487 7143686\"\n\n# 1. simplified-water-polygons\nwget https://osmdata.openstreetmap.de/download/simplified-water-polygons-split-3857.zip\nunzip simplified-water-polygons-split-3857.zip\nexport DUMP_FILE=\"sea-polygons-simplified-28992-nl.sql\"\nogr2ogr -f PGDump ${DUMP_FILE} simplified-water-polygons-split-3857 ${OGR_OPTS}\ngzip ${DUMP_FILE}\n\n# 2. water-polygons\nwget https://osmdata.openstreetmap.de/download/water-polygons-split-3857.zip\nunzip water-polygons-split-3857.zip\nexport DUMP_FILE=\"sea-polygons-28992-nl.sql\"\nogr2ogr -f PGDump ${DUMP_FILE} water-polygons-split-3857 ${OGR_OPTS}\ngzip ${DUMP_FILE}\n\n/bin/rm -rf *water-polygons-split-3857*\n</code></pre> <p>Uploaded to: https://data.nlextract.nl/osm/nl/.  Will be imported into the <code>map5.water</code> table during <code>map5</code> ETL.</p>"},{"location":"create/map/","title":"Map Preparation","text":""},{"location":"create/map/#maps","title":"Maps","text":"<p>Describes how to use the prepared data to create maps. </p> <p></p>"},{"location":"create/map/#1-mapnik-test","title":"1. Mapnik Test","text":"<p>Directly render tiles with Mapnik Python script. Output (JPEG) will be under <code>tools/mapnik/output/</code>.</p> <pre><code>cd tools\n\n# Render multiple tiles at different zooms per category\n./mapnik-render-cat.sh  roads | resident | rural\n\n# Render any single tile by zoom, x, y\n./mapnik-render-tile.sh  z x y\n\n# Render any map by width,height,bbox (lowerleft, upperright) and style\n# Example: \n# ./mapnik-render-map.sh 2000 1000 131000 480000 131500 480500 map-1.png map5topo.xml\n./mapnik-render-map.sh  w h llx lly urx ury outfile style\n\n# Advanced: use simple WMS\n./mapnik-run-wms.sh \n# then find WMS at http://localhost:8001/fm/wms?REQUEST=GetCapabilities&amp;SERVICE=WMS\n# use capitals for WMS query parms!\n\n# OR similar with docker compose\n# Mainly for debug: https://www.jetbrains.com/help/pycharm/using-docker-as-a-remote-interpreter.html\ncd tools/mapnik\ndocker compose up\n</code></pre>"},{"location":"create/map/#2-tile-seeding","title":"2. Tile Seeding","text":"<p>Create tile caches (GeoPackages).</p> <p>During development:</p> <pre><code># For local quick caching: use ./seed-direct.sh\ncd services/mapproxy/seed\n# Entire netherlands, NB takes extremely long!\n./seed-rd.sh\n\n# Muiden Area, takes about 30mins-1h depending on system\n./seed-muiden-rd.sh\n</code></pre> <p>For production the workflow is more extended: \"guarded seed\", verify seeded cache, install cache.</p> <pre><code># For production guarded (some procs may die) caching: use ./seed-guarded.sh\n# These create caches under /var/map5/mapproxy/cache/gpkg/&lt;layer&gt;_seed/\n# Workflow: first seed, verify cache, then install.\n\n# Single tilecache\n./seed-guarded.sh map5topo_rd\n\n# ALL tilecaches:\n./seed-all.sh\n\n# Verify tilecache results\n./verify-cache.sh &lt;cache&gt; &lt;grid&gt;\n# Example\n./verify-cache.sh map5topo_seed dutch_grid_lev13\n\n# Install seeded cache\n./install-seeded.sh  &lt;cache&gt; &lt;grid&gt;\n./install-seeded.sh map5topo dutch_grid_lev13\n</code></pre>"},{"location":"create/map/#3-test-the-services","title":"3. Test the Services","text":"<p>Several apps are available.</p> <ul> <li>Run service stack: <code>cd services; ./start.sh</code></li> <li>Local: http://localhost:8000/mp (MapProxy) http://localhost:8000/app (apps) http://localhost:8000/pgadmin (pgadmin)</li> <li>Fastmap: WMS with Mapnik backend: http://localhost:8000/fm/wms?REQUEST=GetCapabilities</li> <li>Production: https://topo.map5.nl/mp https://topo.map5.nl/app</li> </ul>"},{"location":"create/method/","title":"Development Methodology","text":""},{"location":"create/method/#development-methodology","title":"Development Methodology","text":"<p>Development takes place using the map5topo GitHub repo. For now this is a single  repository that contains all that is needed to prepare the data, generate the map (tiles) and use various tools to inspect and apps to view (map viewers). Website and documentation is in  the map5topo.nl GitHub repo </p> <p>There are three main servers in the development chain:</p> <ul> <li>topo.map5.nl the DEV server</li> <li>test.map5.nl the TEST server</li> <li>map5.nl the PROD server</li> </ul> <p>The latter two are identical, only the final tiling (in GeoPackages)  is done on TEST and then copied to PROD. But you can run everything locally!</p> <p>Below are guidelines how to develop using the map5topo GitHub repository.</p>"},{"location":"create/method/#0-startup-once","title":"0. Startup (once)","text":"<ul> <li>the repo is currently private, you need to be added with proper rights</li> <li><code>git clone https://github.com/map5nl/map5topo.git</code></li> </ul>"},{"location":"create/method/#1-keeping-current","title":"1. Keeping current","text":"<p>Before changing any file be sure to do a <code>git pull</code> to become current with the latest version of the repo. </p> <p>Use  <code>./refresh-git.sh</code> if you want to wipe any local changes.  Warning: your changes are lost forever!. Instead you may do <code>git stash</code> to keep your changes locally or use branching.</p>"},{"location":"create/method/#2-issues-and-milestones","title":"2. Issues and Milestones","text":"<p>GitHub Issues and Milestones are used track progress and releases. </p>"},{"location":"create/method/#working-with-issues","title":"Working with Issues","text":"<p>Issues can be opened by anyone. They usually represent a new feature or a bug.  Through Labels, Issues can be tagged with a Priority and other characteristics like Bug, Enhancement, Documentation. See map5topo issues.</p> <p>When changing and commit/pushing code to the repo, you are strongly encouraged to add the Issue number  in the Commit message. That way we know that an issue is worked on and that your changes are related to that issue number. The issue number is prefixed with a 'hash' symbol. For example:</p> <pre><code>git add tools/mapnik/styles-map5/mystyle.xml\ngit commit -m \"#128 changing zoom levels\"\ngit push\n</code></pre> <p>For trivial changes or quickfixes there may not be an issue number, so not required.</p>"},{"location":"create/method/#working-with-milestones","title":"Working with Milestones","text":"<p>A Milestone is basically a list of Issues with a name, state and description.  In the GitHub UI you can add or remove an Issue to/from a Milestone. A Milestone corresponds to a Release. Milestones, thus Releases, are named YYYY-MM, for example 2023-05.  See our Milestones here: https://github.com/map5nl/map5topo/milestones.</p> <p>This way we know \"what went into a Release\" which greatly helps making release notes.  If an Issue is not finished, it can be moved to a next Milestone, thus Release.</p>"},{"location":"create/method/#3-gitops-automation","title":"3. GitOps Automation","text":"<p>The \"DEV\" server is topo.map5.nl. This server always has the latest version of the GitHub repo <code>main</code> branch. Whenever something is changed in the repo, that code is refreshed (via a GitHub Workflow). Further Workflow actions depend on  the directory in which the change was made. </p> <p>Whenever something is committed/pushed, a GitHub Workflow is started (from within GitHub) that applies to the directory where a change was made. If multiple directories are changed, multiple Workflows are started.</p> <p>In general for <code>services</code>, the (<code>docker-compose</code>) service will be restarted. If a new version is configured, the Docker Image is downloaded first. </p> <p>For changes under <code>tools</code> the following applies:</p> <ul> <li><code>tools/mapnik</code>: the MapProxy service will automatically reload the Mapnik config (Layers/Styles)</li> <li><code>tools/etl</code>: no effect, any ETL needs to be run manually on the server, as these may be long-duration processes</li> <li><code>tools/dem</code>: no effect, as these may be long-duration processes</li> <li><code>tools/qgis</code>: no effect, basically the QGIS Inspector project connects to the <code>service/featureserv</code> via OGC Feature REST API</li> </ul>"},{"location":"create/method/#4-inspection","title":"4. Inspection","text":"<p>Several tools and apps are available to inspect data and maps.</p> <ul> <li>https://topo.map5.nl/app/ several apps </li> </ul> <p>Style/map inspection:</p> <ul> <li>the main inspection app is https://topo.map5.nl/app/sidebyside to compare among versions</li> <li><code>map5topo - DEV - DIRECT</code> is a Layer that renders tiles from the DEV server without caching, so the Mapnik Styles are directly applied.</li> <li>this way you may compare your changes with TEST and PROD </li> <li>NB:  <code>map5topo - DEV - DIRECT</code> renders tiles 256x256 directly, without metatiling and gutter. Reason is performance. This impacts label placement!</li> </ul> <p>Data inspection:</p> <ul> <li><code>pg_featureserv</code> is run to provide ALL PostGIS data schemas plus tables via OGC API Features endpoint</li> <li>in QGIS we connect to that endpoint</li> <li>QGIS: start the project from <code>tools/qgis/map5topo-inspector.qgz</code></li> <li>PostGIS: use PGAdminIV webapp to inpect PostGIS data: https://topo.map5.nl/pgadmin</li> </ul>"},{"location":"create/method/#5-documentation","title":"5. Documentation","text":"<p>You are encouraged to write comments and READMEs, but the main documentation is has its own repo:  the  map5topo.nl GitHub repo using mkdocs to automatically rebuild the website map5topo.nl on commit/push.</p> <p>Docs are in Markdown. </p>"},{"location":"create/setup/","title":"System Setup","text":""},{"location":"create/setup/#setup","title":"Setup","text":"<p>Describes how the server VM has been setup from the map5topo repo. This basically describes how you can setup your local system to start preparing data and creating maps.</p> <p>Below all steps are documented. </p>"},{"location":"create/setup/#1-ubuntu-server","title":"1. Ubuntu Server","text":"<p>Info:</p> <ul> <li>Hetzner Cloud Linux Ubuntu server Virtual Machine (VM), with Ubuntu 20.4 </li> <li>Specs: CX41 2 VCPU  8 GB  RAM  40 GB DISK LOCAL - 15.90 a month</li> <li>Extra Volume 300GB  - 12.00 a month</li> <li>IP address <code>65.108.253.148</code></li> </ul> <p>Prepare server steps:</p> <ul> <li>DNS: create A-record <code>topo.map5.nl</code> for IP address <code>65.108.253.148</code></li> <li>local user with full sudo rights e.g. <code>sudo su -</code></li> <li>Upgrade server to latest: <code>apt-get update &amp;&amp; apt-get -y upgrade</code></li> <li>provide local user direct SSH root access via <code>authorized_keys</code> (needed for Ansible)</li> </ul>"},{"location":"create/setup/#extra-volume","title":"Extra Volume","text":"<p>300GB for tile caches and Docker storage.</p> <pre><code>sudo mkfs.ext4 /dev/disk/by-id/scsi-0HC_Volume_19990557\nmkdir /var/map5\nmount -o discard,defaults /dev/disk/by-id/scsi-0HC_Volume_19990557 /var/map5\necho \"/dev/disk/by-id/scsi-0HC_Volume_19990557 /var/map5 ext4 discard,nofail,defaults 0 0\" &gt;&gt; /etc/fstab\n</code></pre> <p>Later we will configure Docker daemon to use this storage.</p> <p>600GB for AHN source and hillshade Tiffs. After preparation we'll store in long-term storage and remove this volume. Output result is around 90GB Hillshade files.</p> <pre><code>sudo mkfs.ext4 /dev/disk/by-id/scsi-0HC_Volume_20257946\nsudo mkdir /var/data\nsudo mount -o discard,defaults /dev/disk/by-id/scsi-0HC_Volume_20257946 /var/data\necho \"/dev/disk/by-id/scsi-0HC_Volume_20257946 /var/data ext4 discard,nofail,defaults 0 0\" &gt;&gt; /etc/fstab\nsudo mkdir /var/data/dem\n</code></pre>"},{"location":"create/setup/#2-prepare-local-system","title":"2. Prepare Local System","text":"<p>On your local system you mainly need to have <code>Ansible</code> and <code>Git</code> (client) installed:</p>"},{"location":"create/setup/#install-ansible","title":"Install Ansible:","text":"<ul> <li>have Python 3 (3.7 or better) installed</li> <li>OPTIONAL (but recommended) create a Python Virtualenv (for Ansible)  </li> <li>install Ansible with <code>pip install ansible</code> 2.9.* or higher</li> <li>test: <code>ansible --version</code> - shows ansible 2.9.19 ...</li> <li>test: <code>ansible-vault --version</code> shows ansible-vault 2.9.19 ...</li> </ul> <p>More on Ansible below.</p>"},{"location":"create/setup/#install-git-client","title":"Install <code>Git</code> client.","text":"<p>Depends on your system. Make sure you have a command line <code>git</code> (CLI).</p>"},{"location":"create/setup/#3-prepare-new-github-repo","title":"3. Prepare New GitHub Repo","text":"<p>Clone the Git repo locally: <code>git clone https://github.com/map5nl/map5topo.git</code></p> <p>We will call the root dir of the cloned git repo on your system just <code>git/</code> from here.</p>"},{"location":"create/setup/#4-setup-ansible","title":"4. Setup Ansible","text":"<p>Most of the configuration that is specific to your new server  is stored under:</p> <ul> <li><code>git/ansible/hosts</code> (Ansible inventories)</li> <li><code>git/ansible/vars</code> (variables and SSH keys). </li> </ul> <p>Files under <code>git/ansible/vars</code> need to be always encrypted with <code>Ansible Vault</code>. You will need to  create your own (encrypted) version of these encrypted files.  For many files an example file is given. </p>"},{"location":"create/setup/#install-ansible-modules","title":"Install Ansible Modules","text":"<p>Called \"Roles\" these are third-party Ansible components that help with specific tasks. Install these as follows:</p> <pre><code>cd git/ansible\nansible-galaxy install --roles-path ./roles -r requirements.yml\n</code></pre>"},{"location":"create/setup/#ansible-hosts","title":"Ansible Hosts","text":"<p>The hostname is crucial to services functioning. Two steps:</p> <ul> <li>set content of <code>git/ansible/hosts/prod.yml</code> (Inventory) to</li> </ul> <pre><code>map5topo:\n  hosts:\n    MAP5TOPO:\n       ansible_port: 22\n       ansible_host: topo.map5.nl\n       ansible_user: root\n       ansible_python_interpreter: /usr/bin/python3\n</code></pre> <ul> <li>note: <code>MAP5TOPO</code> will also be the new hostname, and prompt name </li> <li>set content of <code>git/env.sh</code> (common environment Docker-based services) to:</li> </ul> <pre><code>#!/bin/bash\n# Sets global env vars based on host-name\n# Needed for various host-dependent configs, especiallly Traefik SSL-certs.\n\n# Export and Defaults\n\n# You may (or not may) set/export these vars externally\n# MAP_AREA\n# \"muiden\" implies small dataset Muiden area,\n# \"utrecht\" implies larger dataset about Utrecht province,\n# \"nl\" is full NL dataset\nexport MAP_AREA=${MAP_AREA}\n\n# DEPLOY_SERVER\n# \"local\" implies localhost and http.\n# \"prod\" implies a domain and https\nexport DEPLOY_SERVER=${DEPLOY_SERVER:-local}\n\n# Assume local deployment\nexport TRAEFIK_DOMAIN=\"localhost\"\nexport TRAEFIK_SSL_ENDPOINT=\nexport TRAEFIK_SSL_DOMAIN=\nexport TRAEFIK_SSL_CERT_RESOLVER=\nexport TRAEFIK_USE_TLS=\"false\"\nexport MAP5_SITE_URL=\n\nexport HOST_UID=$(id -u)\nexport HOST_GID=$(id -g)\nexport HOST_UID_GID=\"${HOST_UID}:${HOST_GID}\"\n\nexport VAR_DIR=\"/var/map5\"\nexport GIT_DIR=\nexport DATA_DIR=\"${VAR_DIR}/data\"\n\n# Set host-dependent vars\ncase \"${HOSTNAME}\" in\n    # map5topo development server\n    \"MAP5TOPO\")\n        DEPLOY_SERVER=\"prod\"\n        GIT_DIR=\"/home/madmin/git\"\n        MAP_AREA=${MAP_AREA:-nl}\n        TRAEFIK_SSL_DOMAIN=\"topo.map5.nl\"\n        TRAEFIK_SSL_CERT_RESOLVER=\"le\"\n        ;;\n    # map5.nl official test server\n    \"MAP5TEST\")\n        DEPLOY_SERVER=\"prod\"\n        GIT_DIR=\"/home/madmin/map5topo.git\"\n        MAP_AREA=${MAP_AREA:-nl}\n        TRAEFIK_SSL_DOMAIN=\"test.map5.nl\"\n        TRAEFIK_SSL_CERT_RESOLVER=\"default\"\n        ;;\n    # Just's Mac\n    \"nusa\")\n        DEPLOY_SERVER=\"local\"\n        GIT_DIR=\"/Users/just/project/map5/map5topo.git\"\n        MAP_AREA=${MAP_AREA:-muiden}\n        ;;\n    # Niene - no 1\n    \"niene-ThinkPad-P53s\")\n        DEPLOY_SERVER=\"local\"\n        GIT_DIR=\"/home/niene/Documents/git_projecten/map5topo\"\n        ;;\n    # Niene - no 2\n    \"niene-desktop\")\n        DEPLOY_SERVER=\"local\"\n        GIT_DIR=\"/home/niene/Documents/git_projecten/map5topo\"\n        ;;\n# PLACE HERE THE RESULT 'hostname' on your system, basically your GIT root dir\n# for the map5topo GH repo.\n#    \"myhost\")\n#        DEPLOY_SERVER=\"local\"\n#        GIT_DIR=\"/your/map5topo/git root/dir/git\"\n#        ;;\n    *)\n        echo \"Your host ${HOSTNAME} is unknown - PLEASE ADD YOUR HOSTNAME IN git/env.sh - exit\"\n        exit 1\nesac\n\n# default\nMAP_AREA=${MAP_AREA:-utrecht}\n\nif [[ ${DEPLOY_SERVER} = \"local\" ]]\nthen\n    MAP5_SITE_URL=\"http://localhost:8000\"\n    DATA_DIR=\"${GIT_DIR}/data\"\n    VAR_DIR=\"${GIT_DIR}/services/mapproxy/var\"\n\nelif [[ ${DEPLOY_SERVER} = \"prod\" ]]\nthen\n    source /etc/environment\n  TRAEFIK_SSL_ENDPOINT=\"https\"\n  TRAEFIK_USE_TLS=\"true\"\n  TRAEFIK_DOMAIN=\"${TRAEFIK_SSL_DOMAIN}\"\n  MAP5_SITE_URL=\"https://${TRAEFIK_SSL_DOMAIN}\"\nfi\n\n# Data PostGIS dump download files\nexport BAG_GZ_FILE_NAME=\"bagv2-pand-${MAP_AREA}.sql.gz\"\nexport BGT_DUMP_FILE_NAME=\"bgt-lean-${MAP_AREA}.dump\"\nexport BRK_GZ_FILE_NAME=\"kadgrens-${MAP_AREA}.sql.gz\"\nexport BRT_TOP10_GZ_FILE_NAME=\"top10nl-${MAP_AREA}.sql.gz\"\nexport BRT_TOP50_GZ_FILE_NAME=\"top50nl-${MAP_AREA}.sql.gz\"\nexport BRT_TOP100_GZ_FILE_NAME=\"top100nl-${MAP_AREA}.sql.gz\"\nexport GRID_RD_1KM_FILE_NAME=\"grid-rd-1km.sql\"\nexport NWB_GZ_FILE_NAME=\"nwb-wegen-${MAP_AREA}.sql.gz\"\nexport OSM_SEA_GZ_FILE_NAME=\"sea-polygons-28992-nl.sql.gz\"\nexport OSM_SEA_SIMP_GZ_FILE_NAME=\"sea-polygons-simplified-28992-nl.sql.gz\"\n\n# Not used (yet)\nexport BRT_TOP250_GZ_FILE_NAME=\"top250nl-${MAP_AREA}.sql.gz\"\nexport BRT_TOP500_GZ_FILE_NAME=\"top500nl-${MAP_AREA}.sql.gz\"\n\n# Tools locations\nexport TOOLS_DIR=\"${GIT_DIR}/tools\"\nexport MAPNIK_DIR=\"${TOOLS_DIR}/mapnik\"\nexport DEM_DIR=\"${TOOLS_DIR}/dem\"\nexport ETL_DIR=\"${TOOLS_DIR}/etl\"\n\n# Local data folders\nexport BAG_DATA_DIR=\"${DATA_DIR}/bag\"\nexport BGT_DATA_DIR=\"${DATA_DIR}/bgt\"\nexport BRK_DATA_DIR=\"${DATA_DIR}/brk\"\nexport BRT_DATA_DIR=\"${DATA_DIR}/brt\"\nexport DEM_DATA_DIR=\"${DATA_DIR}/dem/${MAP_AREA}\"\nexport GRID_DATA_DIR=\"${DATA_DIR}/grid\"\nexport NWB_DATA_DIR=\"${DATA_DIR}/nwb\"\nexport OSM_DATA_DIR=\"${DATA_DIR}/osm\"\n\necho \"env.sh: DEPLOY_SERVER=${DEPLOY_SERVER} - MAP_AREA=${MAP_AREA} - MAP5_SITE_URL=${MAP5_SITE_URL}\"\nexport LOG_DIR=\"${VAR_DIR}/log\"\n</code></pre> <p>So <code>MAP_AREA=prod</code> here is to discern with a deployment on <code>localhost</code> (<code>MAP_AREA=test</code>, where .e.g. no https/SSL is used).</p>"},{"location":"create/setup/#create-ssh-keys","title":"Create SSH Keys","text":"<p>These are used to invoke actions on the server both from GitHub Actions (via GitHub Sercrets)  and from your local Ansible setup. Plus a set of authorized_keys for the admin SSH user.</p> <ul> <li>cd <code>git/ansible/vars</code></li> <li>create new SSH keypair (no password): <code>ssh-keygen -t rsa -q -N \"\" -f gh-key.rsa</code></li> </ul>"},{"location":"create/setup/#create-authorized_keys","title":"Create authorized_keys","text":"<p>Create new <code>git/ansible/vars/authorized_keys</code> with your public key and for others you want to give access to the admin SSH account, plus <code>gh-key.rsa.pub</code> .</p> <pre><code>cat gh-key.rsa.pub &gt; authorized_keys\ncat ~/.ssh/id_rsa.pub &gt;&gt; authorized_keys\ncat id.rsa.pub.of.joe &gt;&gt; authorized_keys   # etc\n</code></pre> <p>Set these for the <code>root</code> and <code>&lt;admin user&gt;</code> in their <code>.ssh/authorized_keys</code>.</p> <p>See <code>MAP5TOPO_GH</code>  GitHub Deploy key below.</p> <pre><code>scp vars/gh-key.rsa root@topo.map5.nl:.ssh/id_rsa\n</code></pre>"},{"location":"create/setup/#set-github-deploy-key-and-secrets","title":"Set GitHub Deploy Key and Secrets","text":"<p>Go to GH repo Settings/keys</p> <ul> <li>set DEPLOY_KEY from <code>git/ansible/vars/gh-key.rsa.pub</code></li> </ul> <p>Go to GH repo Settings|Secrets and create these secrets for Actions:</p> <ul> <li>ANSIBLE_SSH_PRIVATE_KEY - with value from <code>git/ansible/vars/gh-key.rsa</code></li> <li>ANSIBLE_VAULT_PASSWORD - value from <code>~/.ssh/ansible-vault/map5topo.txt</code> </li> </ul>"},{"location":"create/setup/#adapt-varsyml","title":"Adapt vars.yml","text":"<p>Create new <code>git/ansible/vars/vars.yml</code> from example <code>vars.example.yml</code> in that dir.</p> <p>The first part of <code>vars.yml</code> contains generic, less-secret, values.  Use variables where possible. Format is Python-Jinja2 template-like:</p> <pre><code>my_ssh_pubkey_file: ~/.ssh/id_rsa.pub\nmy_email: my@email.nl\nmy_admin_user: the_admin_username\nmy_admin_home: \"/home/{{ my_admin_user }}\"\nmy_git_home: \"{{ my_admin_home }}/git\"\nmy_github_repo: git@github.com:map5nl/map5topo.git\nvar_dir: /var/ogcapi\nlogs_dir: \"{{ var_dir }}/log\"\nservices_home: \"{{ my_git_home }}/services\"\npip_install_packages:\n  - name: docker\ntimezone: Europe/Amsterdam\nufw_open_ports: ['22', '80', '443']\n</code></pre> <p>Note the GitHub repo is SSH-based for deploy-key!</p> <p>The second part deals with more secret values, like usernames and passwords for services. These will be copied into the VM's <code>/etc/environment</code> file.</p> <pre><code>etc_environment:\n  PG_DB: the_db  # PostGIS service\n  PG_USER: the_user  # PostGIS service\n  PG_PASSWORD: the_pw  # PostGIS service\n  PGADMIN_EMAIL: the_user@the_user.nl # PGadmin service\n  PGADMIN_PASSWORD: the_pw  # PGadmin service\n</code></pre>"},{"location":"create/setup/#create-ansible-vault-password","title":"Create Ansible Vault Password","text":"<ul> <li>create strong password  </li> <li>store in <code>~/.ssh/ansible-vault/map5topo.txt</code> for convenience</li> </ul>"},{"location":"create/setup/#encrypt-ansible-files","title":"Encrypt Ansible Files","text":"<p>VERY IMPORTANT. UNENCRYPTED FILES SHOULD NEVER BE CHECKED IN!!!</p> <p>Using <code>ansible-vault</code> with password encrypt these:</p> <pre><code>ansible-vault encrypt --vault-password-file ~/.ssh/ansible-vault/map5topo.txt vars/vars.yml\nansible-vault encrypt --vault-password-file ~/.ssh/ansible-vault/map5topo.txt vars/gh-key.rsa\nansible-vault encrypt --vault-password-file ~/.ssh/ansible-vault/map5topo.txt vars/gh-key.rsa.pub \nansible-vault encrypt --vault-password-file ~/.ssh/ansible-vault/map5topo.txt vars/authorized_keys \n</code></pre>"},{"location":"create/setup/#disable-github-workflows","title":"Disable GitHub Workflows","text":"<p>We do not want that workflows take effect immediately.  So disable them temporary by renaming the dir.</p> <pre><code>cd git/.github/workflows\ngit mv workflows workflows.not\ngit add .\ngit commit -m \"disable workflows\"\ngit push\n</code></pre>"},{"location":"create/setup/#5-bootstrapprovision-server","title":"5 Bootstrap/provision Server","text":"<p>Moment of truth! Bootstrap (provision the server) in single playbook. Save the logfile for analysis.</p> <ul> <li><code>ansible-playbook -v --vault-password-file ~/.ssh/ansible-vault/map5topo.txt bootstrap.yml -i hosts/prod.yml &gt; bootstrap.log 2&gt;&amp;1</code></li> </ul> <p>If all goes well, this output should be shown at end:</p> <pre><code>PLAY RECAP ***********************************************************************************************************\napisandbox                 : ok=58   changed=22   unreachable=0    failed=0    skipped=8    rescued=0    ignored=0   \n</code></pre> <p>Observe output for errors (better is to save output in file via <code>.. &gt; bootstrap.log 2&gt;&amp;1</code>).</p> <p>In cases of errors and after fixes, simply rerun the above Playbook.</p> <p>Site should be running at: https://topo.map5.nl Check with portainer https://topo.map5.nl/portainer/.</p>"},{"location":"create/setup/#6-docker-storage-in-attached-volume","title":"6 Docker storage in attached Volume","text":"<p>See https://www.guguweb.com/2019/02/07/how-to-move-docker-data-directory-to-another-location-on-ubuntu/</p> <pre><code>service docker stop\nmkdir -p /var/map5/docker\n\n# Add this file\nvi /etc/docker/daemon.json\n# add this content\n{\n  \"data-root\": \"/var/map5/docker\"\n}\n\n# copy current content\nrsync -aP /var/lib/docker/ /var/map5/docker\n\n# move old dir just in case\nmv /var/lib/docker /var/lib/docker.old\n\nservice docker start\n\n# remove the old\nrm -rf /var/lib/docker.old\n</code></pre>"},{"location":"create/setup/#6a-disk-resizing","title":"6a Disk Resizing","text":"<pre><code>cd git/services\n./stop.sh\n\n# as root sudo -\nservice docker stop\numount /var/map5\n\n# enlarge Volume size in Hetzner Console\n\n# figure out which disk\nfdisk -l\nresize2fs /dev/sdc\n\nmount /var/map5\nservice docker stop\ncd git/services\n./start.sh\n</code></pre>"},{"location":"create/setup/#7-resolve-issues","title":"7 Resolve Issues","text":"<p>These are typical issues found and resolved:</p> <ul> <li>make sure the <code>gh-key.rsa.pub</code> is present in both <code>/root</code> and <code>/home/&lt;admin user&gt;</code> <code>.ssh/authorized_keys</code></li> <li><code>postgis + pgadmin</code>: needed to manually <code>stop.sh</code>, remove all volumes and <code>start.sh</code> otherwise could not login on pgadmin nor postgis from there  </li> </ul>"},{"location":"create/setup/#8-enable-github-workflows","title":"8. Enable GitHub Workflows","text":"<p>Enable by renaming:</p> <pre><code>git mv workflows.not workflows \ngit add .\ngit commit -m \"enable workflows\"\ngit push\n</code></pre>"},{"location":"design/architecture/","title":"Overall Architecture","text":""},{"location":"design/architecture/#architecture","title":"Architecture","text":"<p>The overall, what may be called, \"full stack\", high-level architecture, is depicted in the diagram below. (Click on the image to enlarge).</p> <p></p> map5topo architecture <p>This figure can best be read through a \"follow the data\" stream. Arrows denote data flow. Blue boxes tools. Green boxes data.</p> <p>The main scenario starts at the bottom of the figure.</p> <p>In short from bottom to top:</p> <ul> <li>bottom green boxes: raw datasets</li> <li>ETL is Extract Transform Load, basically data conversion &amp; transformation from raw to \"manageable\" data</li> <li>ETL: GDAL - <code>gdaldem</code> tooling to convert raw DEM height data to hillshade (GeoTIFF)</li> <li>ETL: also extract (Vector) Contour lines from DEM and store in PostGIS</li> <li>ETL: <code>osm2pgsql</code> converts raw OpenStreetMap data files (.pbf) to PostGIS</li> <li>ETL: NLExtract converts Dutch Key Registry data, usually GML, to PostGIS</li> <li>Unified Data Schema: further expanded in Data Design Section, funnels all Vector data into single Schema</li> <li>Mapnik is basically a Raster Map Renderer that can operate on various data sources (GTiff, PostGIS, ..)</li> <li>Mapnik operates with Mapnik Style files (.xml) later CartoCSS to generate raster map files</li> <li>MapProxy is a raster data server that supports a multitude of raster map sources, usually WMS, here Mapnik</li> <li>MapProxy can generate so called Tile Caches to store rendered map (raster) tiles</li> <li>MapProxy+Mapnik also generates HQ Tiles also known as Retina Tiles with double DPI by scaling to 512*512</li> <li>GeoPackage is a versatile, fast and easy to deploy tile cache (single) file format</li> <li>MapProxy serves raster maps in a large range of Web Mapping protocols: WMTS, WMS, TMS, \"XYZ\",..</li> <li>Finally Traefik is a front-end HTTP(S) server to the users and apps that consume the map tiles</li> <li>Traefik is not only a routing Proxy but also automatically handles/creates/updates SSL certificates using the free Let's Encrypt service</li> <li>Just Objects B.V. is a sponsor of Let's Encrypt!</li> </ul>"},{"location":"design/data/","title":"Data Design","text":""},{"location":"design/data/#data-design","title":"Data Design","text":"<p>Source Datasets and Data model.</p>"},{"location":"design/data/#intro","title":"Intro","text":"<p>map5topo is composed of multiple (open) datasets. The aim is to fit these all into a single model, (feature) classification and DB-schema.</p> <p>This is an ongoing process. The name of the (PostGIS) schema is <code>map5</code>. Tables in this schema are filled with data from other schemas/tables that contain the various (vector) sources like OpenStreetMap, BRT, BRK, BGT, BAG etc. SQL scripts are used for this transformation.</p> <p>Some similar work, common data schemas from various source datasets:</p> <ul> <li>OpenMapTiles Schema OMT</li> <li>PDOK Vector Tiles BGT BRT - Pilot</li> <li>Basemap DE Data Model</li> <li>Overture Maps Data Schema</li> </ul> <p>Most approaches apply hierarchical feature classification: OMT uses <code>class</code>, <code>subclass</code>, PDOK Vector Tiles Pilot uses \"Level-Of-Detail\": <code>lod1</code>, <code>lod2</code> etc. We like the latter convention as it allows an endless  hierarchy (and is short to type!).</p> <p>The image below depicts the map5-schema approach. (Click image to enlarge).</p> <p></p>"},{"location":"design/data/#challenges","title":"Challenges","text":"<p>Although reclassification has been exercised in many mapping projects like the ones mentioned above, the extra challenge here is that completely disjunct datasets are used: Dutch Key Registries  (BAG, BGT, BRT etc) and OpenStreetMap. Even among Dutch Key registries very different feature classification schemes are in place. For example 'Terrain' (Dutch: 'Terrein') differs in classification among Top10NL and BGT and even  is different from Top50NL. Also geometries often do not align, as they originate from  different sources and surveying methods, e.g. OpenStreetMap and key registries like BRT and BGT.  Geometry-misalignment is even the case among Dutch key-registries, most notably between BRT and BGT. Though work is underway in BRT.Next. </p> <p>An additional challenge is that the extent of the map includes neighbouring countries. The map of The Netherlands does not stop at its country-borders! For neighbouring countries, only data from OpenStreetMap is available now. Later, local datasets and hillshading from these countries may be added.  The aim is to develop the map from a completely integrated dataset (tables, layers, styles), i.e. from the \"map5 schema\". There are no separate tables/layers/styles for neighbouring  countries. Hint: the 'trick' is to mark each record with an <code>abroad</code> boolean attribute (see below).</p> <p>In summary these are the challenges:</p> <p></p>"},{"location":"design/data/#classification","title":"Classification","text":"<p>A hierarchical classification is applied, similar to animal and plants classification.  Later, i.s.o. <code>class</code>, <code>subclass</code> \"Level-Of-Detail\": <code>lod1</code>, <code>lod2</code> will be used.</p> <p></p>"},{"location":"design/data/#common-data-structure","title":"Common Data Structure","text":"<p>Each table will follow a common data structure design.</p> <p></p> <p>As many features will have specific properties like surface, oneway, bridge (roads), names,  population (places), intermittent (water), these are implemented with feature-specific columns.</p> <p>Tables will be implemented as in image below.</p> <p></p> <p>So in summary each table in the map5 schema has a similar setup, i.e. columns:</p> <pre><code>CREATE TABLE map5.xyz (\n    -- table-specific columns, usually classifications, area, population etc \n    (lod1-lod3)\n    ..\n    ..\n    ..\n\n    -- COMMON AND FEATURE-SPECIFIC COLUMNS (PROPERTIES)\n    --\n\n    -- Relative height\n    z_index INTEGER DEFAULT 0,\n\n    -- min and maxzoom in Dutch RD\n    -- when to show an object on the map\n    rdz_min INTEGER, \n    rdz_max INTEGER, \n\n    -- Where the data record originates from\n    src_schema TEXT,\n    src_table TEXT,\n    src_idref TEXT,\n\n    -- Is the object in NL or outside (abroad)?\n    abroad BOOLEAN DEFAULT FALSE,\n\n    -- Geometry in Dutch EPSG\n    geom GEOMETRY(POINT|POLYGON|LINESTRING, 28992)\n);\n</code></pre> <p>Many tables will contain a classification, like for Landcover or POIs. This is a typical table structure:</p> <pre><code>CREATE TABLE map5.landcover (\n    lod1 TEXT,\n    lod2 TEXT,\n    lod3 TEXT,\n    area BIGINT DEFAULT 0,\n\n    -- Common columns\n    z_index INTEGER DEFAULT 0,\n    rdz_min INTEGER DEFAULT -1,\n    rdz_max INTEGER DEFAULT 13,\n    src_schema TEXT,\n    src_table TEXT,\n    src_idref TEXT,\n    abroad BOOLEAN DEFAULT FALSE,\n    geom GEOMETRY(POLYGON, 28992)\n);\n</code></pre> <p>Here <code>lod1</code> through <code>lod3</code> provide an hierarchical classification of the feature. The value-ranges  for these columns/attributes are defined per feature type. Each source dataset-specific  classification is mapped to these value ranges. Usually <code>lod1</code> and <code>lod2</code> is sufficient, sometimes only <code>lod1</code>.</p> <p>For example: <code>lod1</code>: <code>trees</code>, <code>lod2: broadleaved|pine|mixed</code>. <code>lod3</code> contains usually the source-specific value like <code>naaldbos</code>, mainly for debugging or refined styling.</p> <p>The image below summarizes this table design. (Click image to enlarge).</p> <p></p>"},{"location":"design/data/#feature-sets","title":"Feature Sets","text":"<p>This is the list of map5topo feature sets. Criteria/guidelines:</p> <ul> <li>Each feature set is a (PostGIS) table. </li> <li>Some tables may expand to multiple Layers. For example <code>transport</code>: Regular, Tunnels and Bridges.</li> <li>Each feature set/table always has a single geometry type. </li> <li>Sometimes multiple tables for same feature type, for example: <code>transport</code> and <code>transport_area</code>. </li> <li>Some, like <code>housenumber</code>, which are in effect labels, are separate feature sets because of the sheer set's size. </li> <li>For some names the geometry type is implicit, like <code>poi</code> (point). </li> <li>No plural naming like <code>borders</code>, <code>parcels</code>.</li> <li>Each record contains metadata on its source origin object: source -dataset, -table, -identifier.</li> <li>Each record has a \"zoom range\", i.e. a min and max zoomlevel in which it should be rendered.</li> <li>Multiple geometry simplifications/generalizations of the same feature (thus source-id) may thus appear in single table.</li> <li>DEM (Heights): hillshade is not table-based, but separate GeoTIFF raster data.</li> <li>DEM (Heights): contour lines are vector data thus table-based.</li> </ul> <p>The list below is not fixed, subject to change based on new insights, or data items that do not fit in any set.</p> <ul> <li>area_label - point - any  that has a name (except house numbers, transport, water)</li> <li>border  - multipolygon - administrative borders</li> <li>contour_line - line - height lines (derived from DEM)</li> <li>grid  - line - grid lines in map (standard Kadaster RD km lines)</li> <li>housenumber  - point - clear, also house names</li> <li>landcover  - polygon - mostly ground level earth covering (\"aardbedekking\")</li> <li>landuse  - polygon - functional use of land, like military areas, graveyards, parks</li> <li>parcel - line - borders of cadastral parcels</li> <li>pitch - polygon - mainly sports pitches  - special case of landuse, styled with overlay SVG</li> <li>place - point - names of cities, towns up to hamlets</li> <li>poi - point - Points of Interest</li> <li>seamark  - point - navigation aids for water traffic like buoys, beacons and lighthouses, (Dutch: \"vaarwegmarkeringen\") </li> <li>structure  - polygon - anything human-built from buildings/houses up to civil tech structures</li> <li>structure_line    - line -  barriers, fences, powerlines</li> <li>transport         - line - transportation infrastructure: roads, trails, railways, aeroways, ferries etc</li> <li>transport_area    - polygon - transportation infrastructure areas, road areas, aerodromes, aprons</li> <li>valley_label - line - curved labels for valleys (only a few)</li> <li>water - multipolygon - water polygons</li> <li>water_label  - line - water names formed/curved by shapes of waterbodies.</li> <li>waterway - line - water lines</li> <li>waterway_label  - line - waterway names for line-based waterways like rivers and streams</li> </ul> <p>Discussion:</p> <ul> <li><code>aeroway</code> like aerodromes (polygon) is always a separate feature set, why? Is here part of <code>transport_area</code>.</li> <li>to add to this: aeroway lines are now part of <code>transport</code></li> <li>label sets are based on their type: labels for areas (point), water bodies and valleys (generated curved lines), waterways (line).</li> </ul>"},{"location":"design/data/#etl","title":"ETL","text":"<p>The map5 schema will be populated using SQL as the ETL tool. This is for now simple and quickly to adapt.</p> <p></p> <p>The table-SQL for the ETL  can be found here.</p>"},{"location":"design/data/#zoom-specific-selection","title":"Zoom-specific Selection","text":"<p>Each table may contain multiple geometry generalizations (simplifications)  for the same object. Per record the zoomlevel range is specified with <code>rdz_min</code>-<code>rdz_max</code>. Mapnik always provides a <code>scaledenominator</code> when accessing a <code>Layer</code>.  Via the SQL Function <code>rdz()</code> this scaledenominator is converted to an RD Zoomlevel (range 1-13, equal to WebMerc 6-18) that is used in the query on that Layer. This way only the relevant records for that zoomlevel are selected. </p> <p>Many zoom-ranges also have VIEWs, for example for analysis. If needed, for performance, PostgreSQL materialized VIEWs may be applied. But at least data for a single feature type, usually a layer, is not spread over multiple tables now.</p> <p>For example a VIEW for low-zoom Terrain:</p> <pre><code>CREATE VIEW map5.landcover_z0_z3 AS SELECT\n   lc.*\nFROM map5.landcover lc WHERE lc.rdz_min &gt;= 0 AND lc.rdz_max &lt;= 3;\n</code></pre> <p>This also works for Web Mercator tiles as scale-ranges are shared, see e.g. </p><pre><code>.\n\n.\n&lt;!ENTITY maxscale_zoom15_rd10 \"&lt;MaxScaleDenominator&gt;20000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom15_rd10 \"&lt;MinScaleDenominator&gt;10000&lt;/MinScaleDenominator&gt;\"&gt;\n&lt;!ENTITY maxscale_zoom16_rd11 \"&lt;MaxScaleDenominator&gt;10000&lt;/MaxScaleDenominator&gt;\"&gt;\n&lt;!ENTITY minscale_zoom16_rd11 \"&lt;MinScaleDenominator&gt;5000&lt;/MinScaleDenominator&gt;\"&gt;\n.\n.\n</code></pre> <p>Using these common ranges allows parallel zoomlevels: for example RD level 11 is 16 in Web Mercator. RD level 13 is WM level 18, the highest level etc. Usually zoom WM = Zoom RD +5.</p>"},{"location":"design/data/#abroad","title":"Abroad","text":"<p>The map area includes data from countries both bordering (Germany, Belgium) and in vicinity  (Northern France) of The Netherlands. By intersecting a (multi)polygon that contains The Netherlands' borders, in each OSM-record can be marked as located abroad or not This is realized through a simple boolean column,  aptly called <code>abroad</code>. For data from Dutch Key Registries, the fixed <code>abroad</code> value is <code>False</code>.</p>"},{"location":"design/data/#osm-source-data","title":"OSM Source Data","text":"<p>OSM data is downloaded from geofabrik.de, and comprises:</p> <pre><code>  # The Netherlands\n  https://download.geofabrik.de/europe/netherlands-latest.osm.pbf\n\n  # Abroad\n  http://download.geofabrik.de/europe/belgium-latest.osm.pbf \n  http://download.geofabrik.de/europe/germany/niedersachsen-latest.osm.pbf \n  http://download.geofabrik.de/europe/germany/nordrhein-westfalen-latest.osm.pbf \n  http://download.geofabrik.de/europe/germany/rheinland-pfalz-latest.osm.pbf \n  http://download.geofabrik.de/europe/france/nord-pas-de-calais-latest.osm.pbf \n\n  # Sea\n  https://osmdata.openstreetmap.de/download/simplified-water-polygons-split-3857.zip\n  https://osmdata.openstreetmap.de/download/water-polygons-split-3857.zip\n</code></pre> <p>\"The Netherlands\" and \"Abroad\" and stitched together using Osmosis. \"Water\" data is basically sea, with exception of Oosterschelde. These are directly converted, using GDAL <code>ogr2ogr</code>, to PostgreSQL <code>PGDump</code> files for quick reuse.</p>"},{"location":"design/data/#example-landcover","title":"Example Landcover","text":"<p>The image below shows an example for the table <code>map5.landcover</code> (\"Landcover\" and \"Landuse\" are separated).  </p> <p> </p> <p>The figure shows the table structure and the hierarchical classification: <code>lod1</code>  and <code>lod2</code> and their values.  This table is filled from various source tables like BGT and BRT (all \"terrain\"-related) but also OSM.</p> <p>Also an excerpt from the <code>map5.landcover.sql</code> ETL is shown, for mapping records from BRT Top50NL.  This mapping is an ongoing process, as the lod-hierarchy needs to be established and mapped from very different source datasets. Even Dutch Topographic datasets like BRT (smallscale) and BGT (largescale) have very different feature classification schemes. Also none of the source datasets seems to get the difference between \"Landcover\" and \"Landuse\" right. For example, \"orchard\" or \"graveyard\": are these Landcover or Landuse? This is also an ongoing discussion in the OSM Community, as  this recent Landcover proposal shows.</p>"},{"location":"design/data/#metadata","title":"Metadata","text":"<p>Each record within tables in the <code>map5</code> database schema contains its source schema/table and visibility zoom-range. This allows for generating metadata such that this information can be made available per zoomlevel, but also other statistical information like the number of records (at that zoom-level) from a particular source table.</p> <p>This is exactly what the <code>map5.metadata</code> table beholds. As part of the ETL (SQL) that fills <code>map5.</code> tables from thir source schemas/tables, a utility SQL function will also insert (replace) records in <code>map5.metadata</code>. The image below shows the  generic setup.  </p> <p> </p> <p>Below an example query: \"Show me all information for zoomlevel RD 12 that is not abroad\".  </p> <p> </p> <p>Below is the SQL function called at the end of each <code>map5.</code> table generation, that extracts the relevant metadata records from that table.   </p> <p> </p> <p>Below are actual classification values, <code>lod1</code> and <code>lod2</code> (<code>lod3</code> is currently only used for original value/tags)  for each table.</p> table_name lod1 lod2 area_label administrative area_label junction exit area_label junction interchange area_label natural area_label other landcover agriculture arable landcover agriculture orchard landcover agriculture pastoral landcover bare bare landcover bare reed landcover bare urban landcover bare yard landcover greenery grass landcover greenery scrub landcover heath heath landcover sand reed landcover sand sand landcover trees deciduous landcover trees mixed landcover trees pine landcover wetland bare landcover wetland reed landcover wetland scrub landcover wetland tidalflat landuse cemetery landuse military landuse nature_reserve landuse parking landuse sport poi amenity hospital poi distance hm poi distance km poi height poi historic castle poi historic city_gate poi historic monument poi natural tree poi place_of_worship major poi place_of_worship shed poi place_of_worship wayside_chapel poi place_of_worship wayside_shrine poi station bus poi station metro poi station other poi station railway poi station tram poi structure beach_pole poi structure gate poi structure marker_pole poi structure power_generator poi structure powertower poi structure windmill poi tourism camp_site seamark beacon beacon_cardinal seamark beacon beacon_isolated_danger seamark beacon beacon_lateral seamark beacon beacon_special_purpose seamark buoy buoy_cardinal seamark buoy buoy_lateral seamark buoy buoy_safe_water seamark buoy buoy_special_purpose seamark light light_float seamark light light_major seamark light light_minor structure building structure building_addon structure civil_tech structure other_building structure power_generator structure waterholder structure_line barrier ditch structure_line barrier fence structure_line barrier gate structure_line barrier hedge structure_line barrier other structure_line barrier wall structure_line powerline cable structure_line powerline major structure_line powerline minor structure_line powerline other structure_line powerline portal transport aerialway cable_car transport aerialway chair_lift transport aerialway drag_lift transport aerialway gondola transport aerialway goods transport aerialway j-bar transport aerialway magic_carpet transport aerialway platter transport aerialway rope_tow transport aerialway station transport aerialway t-bar transport aerialway yes transport aerialway zip_line transport aeroway abandoned transport aeroway aerodrome_marking transport aeroway airstrip transport aeroway holding_position transport aeroway jet_bridge transport aeroway model_runway transport aeroway navigationaid transport aeroway parking_position transport aeroway razed transport aeroway runway transport aeroway stopway transport aeroway taxilane transport aeroway taxiway transport rail blockpost transport rail construction transport rail crane transport rail crane_rail transport rail crossing transport rail demolished transport rail dismantled transport rail disused transport rail fuel transport rail funicular transport rail historic transport rail hyperloop transport rail light_rail transport rail loading_rack transport rail loading_ramp transport rail miniature transport rail model transport rail modeltrain transport rail monorail transport rail narrow_gauge transport rail no transport rail platform transport rail platform_edge transport rail platform_marker transport rail preserved transport rail proposed transport rail rail transport rail razed transport rail route transport rail signal_box transport rail signal_bridge transport rail subway transport rail tram transport rail tram_stop transport rail traverser transport rail turntable transport rail ventilation_shaft transport rail yard transport rail yes transport road cycleway transport road footway transport road future transport road motorway transport road motorway_link transport road other transport road path transport road pedestrian transport road primary transport road primary_link transport road residential transport road secondary transport road secondary_link transport road service transport road tertiary transport road tertiary_link transport road trunk transport road trunk_link transport road unclassified transport route ferry transport trail bridleway transport trail busway transport trail cycleway transport trail mtb transport trail path transport trail steps transport trail track transport_area aeroway aerodrome transport_area aeroway airstrip transport_area aeroway apron transport_area aeroway deicing_pad transport_area aeroway fuel transport_area aeroway helipad transport_area aeroway heliport transport_area aeroway marking transport_area aeroway model_runway transport_area aeroway paragliding_landing_site transport_area aeroway parking_position transport_area aeroway runway transport_area aeroway signal area transport_area aeroway signal_area transport_area aeroway signal_square transport_area aeroway taxilane transport_area aeroway taxiway transport_area bridge_part support transport_area bridge_part surface transport_area motorized baan voor vliegverkeer transport_area motorized inrit transport_area motorized living_street transport_area motorized parkeervlak transport_area motorized raceway transport_area motorized residential transport_area motorized rijbaan autosnelweg transport_area motorized rijbaan autoweg transport_area motorized rijbaan lokale weg transport_area motorized rijbaan regionale weg transport_area motorized service transport_area motorized track transport_area other 1 transport_area other OV-baan transport_area other berm transport_area other bridleway transport_area other construction transport_area other corridor transport_area other crossing transport_area other cycleway transport_area other elevator transport_area other emergency_access_point transport_area other fietspad transport_area other island transport_area other overweg transport_area other passing_place transport_area other proposed transport_area other ruiterpad transport_area other spoorbaan transport_area other tertiary transport_area other traffic_island transport_area other turntable transport_area other unclassified transport_area other verkeerseiland transport_area pedestrian bus_stop transport_area pedestrian footway transport_area pedestrian path transport_area pedestrian pedestrian transport_area pedestrian platform transport_area pedestrian rest_area transport_area pedestrian services transport_area pedestrian steps transport_area pedestrian voetgangersgebied transport_area pedestrian voetpad transport_area pedestrian voetpad op trap transport_area pedestrian woonerf water basin water lake water other water river water sea water_label bayaxis bay water_label lakeaxis basin water_label lakeaxis reservoir water_label lakeaxis water water_label straitaxis strait waterway canal waterway ditch waterway drain waterway other waterway river waterway stream waterway weir waterway_label canal waterway_label ditch waterway_label drain waterway_label fairway waterway_label river waterway_label stream"},{"location":"design/gitops/","title":"Deployment","text":""},{"location":"design/gitops/#deployment","title":"Deployment","text":"<p>Deployment follows a CI/CD pattern, called \"GitOps\". This is a continuous integration where any commit/push to a Git(Hub) repository results in the deployment  of a new version within a remote server.</p> <p></p> Deployment architecture <p>This figure applies to the map5topo development CI/CD. </p>"},{"location":"design/spec/","title":"Specification","text":""},{"location":"design/spec/#specification","title":"Specification","text":"<p>Goal: develop a Dutch national classic topographic map (or maps). Below overall specifications and  constraints.</p>"},{"location":"design/spec/#criteria","title":"Criteria","text":"<ul> <li>at first raster (tiles)-only</li> <li>possibly Vector (Tiles) later</li> <li>both RD and Web Mercator projections and tiling schemes (EPSG:28992 and EPSG:3857)</li> <li>use Dutch Open Data like Key Registries (\"Basisregistraties\") as much as possible  (see datasets below)</li> <li>may use OSM or other datasets where they provide more detail</li> <li>try not to use Corine and Natural Earth</li> <li>Hillshading from Dutch DEM Open Data: \"AHN\" in 5m and 50cm resolutions</li> <li>attempt classical design, but keep fresh</li> <li>services: tiling and WMS (may use MapProxy)</li> <li>High-quality Retina Tiles (512x512 pixels) </li> <li>license and openness: start proprietary, then make open source when all in place: clean code, documentation.</li> <li>NL neighbouring countries/vicinity: Germany/Belgium/Northern France</li> <li>guard copyrights of existing maps!</li> </ul>"},{"location":"design/spec/#datasets","title":"Datasets","text":"<p>This is a snapshot in time. Anything abroad: all from OpenStreetMap.</p>"},{"location":"design/spec/#now-in-use-dutch-datasetslayers","title":"Now In use (Dutch Datasets/layers)","text":"<ul> <li>TOP10NL  terrein, water, hoogtepunten, dijkpalen, strandpalen</li> <li>TOP50NL  terrein, water</li> <li>TOP100NL  terrein, water</li> <li>BAG  panden</li> <li>OpenStreetMap niet-BAG panden, huisnummers, verharde infra, onverharde wegen, terreinen (lowzoom), zee, water (lowzoom), bushaltes, boeien, administratieve grenzen (gem/prov)</li> <li>BRK-DKK open digitale kadastrale kaart met perceelgrenzen, van het Kadaster.</li> <li>BGT grootschalige topografie: alleen zoom 13, wegdeel-vlak, alle terrein-gerelateerde vlakken, water </li> <li>AHN 5m en 50cm: relie\u0308fschaduw en contourlijnen</li> <li>RWS Nationaal Wegenbestand: hectometer en kilometer-bordjes</li> <li>Gridlijnen (kadaster)</li> </ul>"},{"location":"design/spec/#now-in-use-abroad","title":"Now In use (abroad)","text":"<p>Anything abroad: all data from OpenStreetMap.</p>"},{"location":"design/spec/#to-consider-for-later","title":"To consider for later","text":"<ul> <li>TOPNamen: naamlabels voor woonplaatsen, wateren, natuur, dijken, diversen</li> <li>TOP10NL  spoorwegen, inrichtings- elementen, niet-BAG panden, hoogbouw, hoogtelijnen, dieptelijnen, grenzen (ook bebouwde kommen).</li> <li>BAG  woonplaatsgrenzen, postcode centroid labels.</li> <li>OpenStreetMap  stoplichten, max snelheden op wegen, toeristische punten.</li> <li>BGT grootschalige topografie: alleen zoom 13, overige objecten, bomen(?) </li> <li>Provinciale Risicokaart: risicogevende objecten ; buisleidingen ; dijkringen.</li> <li>RWS Nationaal Wegenbestand: vaarwegen; </li> <li>RWS Bewegwijzeringsdienst: paddenstoelen</li> <li>Hydrografische Dienst Defensie: dieptelijnen en kleurrasters zoetwater; (toestemming nodig!)</li> <li>AGIV: hoogtedata en grondgebonden gebouwen (GBG) in Vlaanderen, zie www.geopunt.be</li> <li>Relie\u0308f Wallonie\u0308: De\u0301p. de la Ge\u0301omatique, Wallonie (TODO)</li> <li>Relie\u0308f NRW : Landesreg. Nordrhein-Westfalen (TODO)</li> <li>EU-DEM: relie\u0308fschaduw + hoogtelijnen buitenland (TODO)</li> <li>NS/Prorail - stationsnamen</li> </ul>"},{"location":"design/spec/#extent","title":"Extent","text":"<ul> <li>EPSG:28992 LL: -20000 275000  UR: 300000 650000  </li> <li>EPSG:4326  LL: 2.923846278 50.438927366  UR: 7.588656577  53.815565633    </li> <li>EPSG:3857 LL: 325481.052318 6522640.17149 UR: 844765.411364 7135303.75439</li> <li>GeoFabriek OSM Buitenland (Osmosis) <code>--bounding-box left=2.666 bottom=50.392  right=7.667 top=53.860</code>  iets ruimer</li> <li> <p>GeoFabriek OSM Buitenland/Water Polygons EPSG:3857 LL: 296778 6514442  UR: 853487 7143686</p> </li> <li> <p>NL Tiling Extent is: '-285401.920, 22598.080, 595401.920, 903401.920' wel heel ruim.</p> </li> </ul> <p>This is the extent to be provided in EPSG:28992: LL: -20000 275000  UR: 300000 650000.</p>"},{"location":"design/spec/#references","title":"References","text":"<ul> <li>https://www.freemap.sk/?map=15/48.552055/19.321260&amp;layers=X  https://github.com/FreemapSlovakia/freemap-mapnik/ nice hillshading!</li> <li>https://github.com/Amsterdam/tiles/ nice stack: DB T-rex, Tileserver-gl, mapproxy</li> <li>https://github.com/der-stefan/OpenTopoMap</li> </ul>"},{"location":"gallery/","title":"Gallery","text":"<p>Work-in-progress (WIP), illustrated with screenshots captured through the years.</p>"},{"location":"gallery/#gallery-2022","title":"Gallery - 2022","text":"<p>See 2022 Gallery</p>"},{"location":"gallery/#gallery-2023","title":"Gallery - 2023","text":"<p>See 2023 Gallery</p>"},{"location":"gallery/#gallery-2024","title":"Gallery - 2024","text":"<p>See 2024 Gallery</p>"},{"location":"gallery/2022/","title":"Gallery - 2022 WIP","text":""},{"location":"gallery/2022/#gallery-2022","title":"Gallery - 2022","text":"<p>Work in progress during 2022. Click on the first image to get a 'Lightbox' slide show with enlarged images.</p> <p>Below the very first screenshot.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"gallery/2023/","title":"Gallery - 2023 WIP","text":""},{"location":"gallery/2023/#gallery-2023","title":"Gallery - 2023","text":"<p>Work in progress during 2023. Click on the first image to get a 'Lightbox' slide show with enlarged images.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"gallery/2024/","title":"Gallery - 2024 WIP","text":""},{"location":"gallery/2024/#gallery-2024","title":"Gallery - 2024","text":"<p>Work in progress during 2024. Click on the first image to get a 'Lightbox' slide show with enlarged images.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"gallery/2025/","title":"Gallery - 2025 WIP","text":""},{"location":"gallery/2025/#gallery-2025","title":"Gallery - 2025","text":"<p>Work in progress during 2025. Click on the first image to get a 'Lightbox' slide show with enlarged images.</p> <p> </p>"}]}